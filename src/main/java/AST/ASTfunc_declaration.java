package AST;

import java.util.ArrayList;
import java.util.List;

import org.llvm.BasicBlock;
import org.llvm.TypeRef;
import org.llvm.Value;

/* Generated By:JJTree: Do not edit this line. ASTfunc_declaration.java Version 4.3 */
/* JavaCCOptions:MULTI=true,NODE_USES_PARSER=false,VISITOR=false,TRACK_TOKENS=false,NODE_PREFIX=AST,NODE_EXTENDS=,NODE_FACTORY=,SUPPORT_CLASS_VISIBILITY_PUBLIC=true */
public class ASTfunc_declaration extends SimpleNode {
	
	public ASTfunc_declaration(int id) {
		super(id);
	}

	public ASTfunc_declaration(MyLang p, int id) {
		super(p, id);
	}

	@Override
	public ASTContent code_gen(ASTContext context) throws Exception {
		if (children == null)
			return null;

		List<TypeRef> parsType = new ArrayList<TypeRef>();
		List<String> parsName = new ArrayList<String>();
		List<Integer> parsAbsType = new ArrayList<Integer>();
		int pos = 0, retAbsoluteType = 0;
		String funcName = ((SimpleNode) children[0]).jjtGetValue().toString();
		TypeRef retType = TypeRef.voidType();
		for (int i = 1; i < children.length; ++i) {
			SimpleNode n = (SimpleNode) children[i];
			ASTContent x = n.code_gen(context);
			if (x.type == TYPE) 
			{
				TypeRef type = ASTContent.getTypeRef(x.info_type);
				if (parsType.size() == parsName.size()) {
					pos = i; retType = type;
					retAbsoluteType = x.info_type;
					break;  
				}
				for (int j=parsType.size(); j<parsName.size(); j++) {
					parsType.add(type);
					parsAbsType.add(x.info_type);
				}
			} else
				parsName.add(n.jjtGetValue().toString());
		}

		TypeRef[] types = new TypeRef[parsType.size()];
		for (int i=0; i<parsType.size(); i++) types[i] = parsType.get(i);	//list转[]
		TypeRef ty_func = TypeRef.functionType(retType, types);
		
		Value func = MyLang.module.addFunction(funcName, ty_func);
		context.put(funcName, func, retAbsoluteType, parsAbsType);	//将以ASTFuncContent装入符号表

		BasicBlock bb = func.appendBasicBlock("entry");
		MyLang.builder.positionBuilderAtEnd(bb);
		ASTContext funcContext = new ASTContext(context, bb, new ASTContent(func, retAbsoluteType));
		for (int i=0; i<parsType.size(); i++) 
		{
			Value arg = MyLang.builder.buildAlloca(parsType.get(i).type(), parsName.get(i));
			MyLang.builder.buildStore(func.getParam(i), arg);
			funcContext.put(parsName.get(i), arg, IDENTIFIER, parsAbsType.get(i));
		}
		
		while (((SimpleNode) children[++pos]).code_gen(funcContext) != null) {
		}
		if (retAbsoluteType == VOID) 
			MyLang.builder.buildRetVoid();
		MyLang.builder.positionBuilderAtEnd(context.entry);
		return new ASTContent(null, FUNCTION);
	}
}
/*
 * JavaCC - OriginalChecksum=388bf681ef270fbee841ded242cb2b43 (do not edit this
 * line)
 */
