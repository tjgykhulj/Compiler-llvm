package AST;
import org.llvm.BasicBlock;
import org.llvm.TypeRef;
import org.llvm.Value;
import org.llvm.binding.LLVMLibrary.LLVMIntPredicate;

/* Generated By:JJTree: Do not edit this line. ASTforeachstm.java Version 4.3 */
/* JavaCCOptions:MULTI=true,NODE_USES_PARSER=false,VISITOR=false,TRACK_TOKENS=false,NODE_PREFIX=AST,NODE_EXTENDS=,NODE_FACTORY=,SUPPORT_CLASS_VISIBILITY_PUBLIC=true */
public
class ASTforeachstm extends SimpleNode {
  SimpleNode variable,range,block;
  public ASTforeachstm(int id) {
    super(id);
  }

  public ASTforeachstm(MyLang p, int id) {
    super(p, id);
  }

  public ASTContent code_gen(ASTContext Context) throws Exception{
	  variable = (SimpleNode)children[0];
	  range = (SimpleNode)children[1];
	  block = (SimpleNode)children[2];
	  ASTContent cur = new ASTContent(
			  MyLang.builder.buildAlloca(TypeRef.int32Type().type(), "cnt"),IDENTIFIER,47);
	  MyLang.builder.buildStore(ty_int.constInt(0, true), cur.value);
	  ASTContent L = variable.code_gen(Context);
	  ASTContent R = range.code_gen(Context);
	  if(L.type != IDENTIFIER)
		  throw new Exception("Left is not IDENTIFIER!");
	  Value n1 = ty_int.constInt(0, true);
	  Value n2 = cur.getPValue().value;
	  Value[] values = new Value[2];
	  values[0] = n1; values[1] = n2;
	  Value ptr = MyLang.builder.buildGEP(((ASTArrayContent)R).value, Value.internalize(values), 2, "a1");

	  R = new ASTContent(ptr, IDENTIFIER, R.info_type);
	  MyLang.builder.buildStore(R.castTo(L.info_type), L.value);
	  
	  R = range.code_gen(Context);
      Value limit = ((ASTArrayContent) R).length;
      ASTContent tot = new ASTContent(
			  MyLang.builder.buildAlloca(TypeRef.int32Type().type(), "cnt"),IDENTIFIER,47);
      ASTContent limitv = new ASTContent(
    		  MyLang.builder.buildLoad(limit, "tmp"),R.info_type);
      ASTContent limitval = new ASTContent(
    		  MyLang.builder.buildStore(limitv.value, tot.value), R.info_type);
	  BasicBlock forheadBB = Context.f_main().appendBasicBlock("forhead");
      BasicBlock forbodyBB = Context.f_main().appendBasicBlock("forbody");
      BasicBlock forfootBB = Context.f_main().appendBasicBlock("forfoot");
      BasicBlock out = Context.f_main().appendBasicBlock("break");
      MyLang.builder.buildBr(forheadBB);
      
      MyLang.builder.positionBuilderAtEnd(forheadBB);
      Value cmp = MyLang.builder.buildLoad(cur.value, "cmp");
      ASTContent cond = new ASTContent(MyLang.builder.buildICmp(LLVMIntPredicate.LLVMIntSLT, 
    		  cmp,tot.getPValue().value, 
    		  String.valueOf(cnt)), BOOLEAN_LITERAL);
      MyLang.builder.buildCondBr(cond.value , forbodyBB, out);
      
      MyLang.builder.positionBuilderAtEnd(forbodyBB);
      ASTContext bodyContext = new ASTContext(Context, Context.entry, Context.func);
      bodyContext.breakBB = out;
      bodyContext.continueBB = forfootBB;
      block.code_gen(bodyContext);
      MyLang.builder.buildBr(forfootBB);
      
      MyLang.builder.positionBuilderAtEnd(forfootBB);
      R = range.code_gen(Context);
	  ASTContent curadd = new ASTContent(
			  MyLang.builder.buildAdd(cur.getPValue().value, TypeRef.int32Type().constInt(1, true), String.valueOf(cnt)), INTEGER_LITERAL);
	  MyLang.builder.buildStore(curadd.castTo(cur.info_type), cur.value);
	  n1 = ty_int.constInt(0, true);
	  n2 = cur.getPValue().value;
	  values = new Value[2];
	  values[0] = n1; values[1] = n2;
	  ptr = MyLang.builder.buildGEP(R.value, Value.internalize(values), 2, "a1");

      R = new ASTContent(ptr, IDENTIFIER, R.info_type);
      MyLang.builder.buildStore(R.castTo(L.info_type), L.value);
      MyLang.builder.buildBr(forheadBB);
      
      BasicBlock end = Context.f_main().appendBasicBlock("endfor");
      MyLang.builder.positionBuilderAtEnd(out);
      MyLang.builder.buildBr(end);
      MyLang.builder.positionBuilderAtEnd(end);
	  return null;
  }
}
/* JavaCC - OriginalChecksum=b1d826f845b298f0d56881aef9b29ec7 (do not edit this line) */

/* JavaCC - OriginalChecksum=b1d826f845b298f0d56881aef9b29ec7 (do not edit this line) */
