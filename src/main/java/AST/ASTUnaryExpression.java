package AST;
import org.llvm.TypeRef;
import org.llvm.Value;

/* Generated By:JJTree: Do not edit this line. ASTUnaryExpression.java Version 4.3 */
/* JavaCCOptions:MULTI=true,NODE_USES_PARSER=false,VISITOR=false,TRACK_TOKENS=false,NODE_PREFIX=AST,NODE_EXTENDS=,NODE_FACTORY=,SUPPORT_CLASS_VISIBILITY_PUBLIC=true */
public
class ASTUnaryExpression extends SimpleNode {
  public String op;
  public SimpleNode Val;
  public ASTUnaryExpression(int id) {
    super(id);
  }

  public ASTUnaryExpression(MyLang p, int id) {
    super(p, id);
  }
  
  public ASTContent code_gen(ASTContext context) throws Exception{
	  Val = (SimpleNode)children[0];
	  op = jjtGetValue().toString();
	  ASTContent val = Val.code_gen(context).getPValue();
	  if(op.equals("+")){
		  if(val.isBoolean())
			  throw new Exception("+Bool is invalid.");
		  if(val.isInteger() || val.isDouble()){
			  return val;
		  }
	  } else if(op.equals("-")){
		  if(val.isBoolean())
			  throw new Exception("+Bool is invalid.");
		  if(val.isInteger()){
			  cnt++;
			  return new ASTContent(MyLang.builder.buildNeg(val.value, String.valueOf(cnt)), val.type);
		  }
		  if(val.isDouble()){
			  cnt++;
			  return new ASTContent(MyLang.builder.buildFNeg(val.value, String.valueOf(cnt)), val.type);
		  }
	  } else if(op.equals("not")){
		  if(val.isBoolean()){
			  cnt++;
			  return new ASTContent(MyLang.builder.buildNot(val.value, String.valueOf(cnt)), val.type);
		  }
		  throw new Exception("not INT/FLOAT is invalid.");  
	  }
	  throw new Exception("Unknown mistake in ASTUnaryExpression.");
  }
}
/* JavaCC - OriginalChecksum=edae6ca8ae816fc2e7f47dd87b3ab16d (do not edit this line) */
