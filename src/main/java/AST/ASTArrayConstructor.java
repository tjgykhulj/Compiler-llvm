package AST;
import org.llvm.Value;

/* Generated By:JJTree: Do not edit this line. ASTArrayConstructor.java Version 4.3 */
/* JavaCCOptions:MULTI=true,NODE_USES_PARSER=false,VISITOR=false,TRACK_TOKENS=false,NODE_PREFIX=AST,NODE_EXTENDS=,NODE_FACTORY=,SUPPORT_CLASS_VISIBILITY_PUBLIC=true */
public
class ASTArrayConstructor extends SimpleNode {
  public ASTArrayConstructor(int id) {
    super(id);
  }

  public ASTArrayConstructor(MyLang p, int id) {
    super(p, id);
  }

  public ASTNewArrayContent code_gen(ASTContext context) throws Exception{
	  int type = ((SimpleNode)children[0]).code_gen(context).type;
	  Value narray = MyLang.module.addGlobal(ty_int.arrayType(ASTContent.getTypeRef(type).type(), children.length), "tmp");
	  narray.setInitializer(ASTContent.getTypeZero(type));
	  
	  for(int i = 0; i < children.length; i++){
		  ASTContent cont = ((SimpleNode)children[i]).code_gen(context).getPValue();
		  if(cont.type != type)
			  throw new Exception("Type Conflict!");
		  Value setter = MyLang.builder.buildInBoundsGEP(narray, "tmp",  ty_int.constInt(0, true),ty_int.constInt(i, true));
		  MyLang.builder.buildStore(cont.value, setter);  
	  }
	  ASTNewArrayContent newArray = new ASTNewArrayContent(narray, ARRAY, type, children.length);
	  return newArray;
	  //return new ASTContent(null, ARRAY);
  }
}
/* JavaCC - OriginalChecksum=0c720dcf096ef3138474ea4e48a06a34 (do not edit this line) */