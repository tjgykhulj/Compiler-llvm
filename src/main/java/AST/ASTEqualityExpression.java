package AST;
import org.llvm.Value;
import org.llvm.binding.LLVMLibrary.LLVMIntPredicate;
import org.llvm.binding.LLVMLibrary.LLVMRealPredicate;

/* Generated By:JJTree: Do not edit this line. ASTEqualityExpression.java Version 4.3 */
/* JavaCCOptions:MULTI=true,NODE_USES_PARSER=false,VISITOR=false,TRACK_TOKENS=false,NODE_PREFIX=AST,NODE_EXTENDS=,NODE_FACTORY=,SUPPORT_CLASS_VISIBILITY_PUBLIC=true */
public
class ASTEqualityExpression extends SimpleNode {
  public SimpleNode Lexp, Rexp;
  public String op;
  public ASTEqualityExpression(int id) {
    super(id);
  }

  public ASTEqualityExpression(MyLang p, int id) {
    super(p, id);
  }
  public ASTContent code_gen(ASTContext context) throws Exception{
	  op = jjtGetValue().toString();
	  Lexp = (SimpleNode)children[0];
	  Rexp = (SimpleNode)children[1];
	  ASTContent L = Lexp.code_gen(context).getPValue();
	  ASTContent R = Rexp.code_gen(context).getPValue();
	  Value RV = R.castTo(L.type);
	  String name = String.valueOf(++cnt);
		  if(L.isDouble()){
			  if(op.equals("==")){
				  cnt++;
				  return new ASTContent(MyLang.builder.buildFCmp(LLVMRealPredicate.LLVMRealOEQ, L.value, RV, name), BOOLEAN_LITERAL);
			  } else if(op.equals("!=")){
				  cnt++;
				  return new ASTContent(MyLang.builder.buildFCmp(LLVMRealPredicate.LLVMRealONE, L.value, RV, name), BOOLEAN_LITERAL);
			  }
		  }
		  if(L.isInteger() || L.isBoolean()){
			  if(op.equals("==")){
				  cnt++;
				  return new ASTContent(MyLang.builder.buildICmp(LLVMIntPredicate.LLVMIntEQ, L.value, RV, name), BOOLEAN_LITERAL);
			  } else if (op.equals("!=")){
				  cnt++;
				  return new ASTContent(MyLang.builder.buildICmp(LLVMIntPredicate.LLVMIntNE, L.value, RV, name), BOOLEAN_LITERAL);
			  }
		  }
	  throw new Exception("Unknown Error in EqualityExpression.");
  }

}
/* JavaCC - OriginalChecksum=d0b59164fc1ab159c26b71eabfd39e6d (do not edit this line) */
