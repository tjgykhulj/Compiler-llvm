package AST;
import org.llvm.TypeRef;
import org.llvm.Value;
import org.llvm.binding.LLVMLibrary.LLVMIntPredicate;
import org.llvm.binding.LLVMLibrary.LLVMRealPredicate;

/* Generated By:JJTree: Do not edit this line. ASTRelationalExpression.java Version 4.3 */
/* JavaCCOptions:MULTI=true,NODE_USES_PARSER=false,VISITOR=false,TRACK_TOKENS=false,NODE_PREFIX=AST,NODE_EXTENDS=,NODE_FACTORY=,SUPPORT_CLASS_VISIBILITY_PUBLIC=true */
public
class ASTRelationalExpression extends SimpleNode {
  public SimpleNode Lexp, Rexp;
  public String op;
  
  public ASTRelationalExpression(int id) {
    super(id);
  }

  public ASTRelationalExpression(MyLang p, int id) {
    super(p, id);
  }
  
  public ASTContent code_gen(ASTContext context) throws Exception{
	  op = jjtGetValue().toString();
	  Lexp = (SimpleNode)children[0];
	  Rexp = (SimpleNode)children[1];
	  ASTContent L = Lexp.code_gen(context).getPValue();
	  ASTContent R = Rexp.code_gen(context).getPValue();
	  if(L.isBoolean() || R.isBoolean())
		  throw new Exception("Bool cannot do CMP.");
	  if((L.isInteger() || L.isDouble()) && (R.isInteger() || R.isDouble())){
		  if(L.isDouble() && !R.isDouble()){
			  R.value = Value.constSIToFP(R.value, TypeRef.doubleType());
			  R.type = FLOAT_LITERAL;
		  } else if (!L.isDouble() && R.isDouble()){
			  L.value = Value.constSIToFP(L.value, TypeRef.doubleType());
			  L.type = FLOAT_LITERAL;
		  }
		  if(L.isInteger() && R.isInteger()){
			  if(op.equals("<")){
				  cnt++;
				  return new ASTContent(MyLang.builder.buildICmp(LLVMIntPredicate.LLVMIntSLT, L.value, R.value, String.valueOf(cnt)), BOOLEAN_LITERAL);
			  } else if (op.equals("<=")){
				  cnt++;
				  return new ASTContent(MyLang.builder.buildICmp(LLVMIntPredicate.LLVMIntSLE, L.value, R.value, String.valueOf(cnt)),BOOLEAN_LITERAL);
			  } else if (op.equals(">")){
				  cnt++;
				  return new ASTContent(MyLang.builder.buildICmp(LLVMIntPredicate.LLVMIntSGT, L.value, R.value, String.valueOf(cnt)),BOOLEAN_LITERAL);
			  } else if (op.equals(">=")){
				  cnt++;
				  return new ASTContent(MyLang.builder.buildICmp(LLVMIntPredicate.LLVMIntSGE, L.value, R.value, String.valueOf(cnt)),BOOLEAN_LITERAL);
			  } 
		  }
		  if(L.isDouble() && R.isDouble()){
			  if(op.equals("<")){
				  cnt++;
				  return new ASTContent(MyLang.builder.buildFCmp(LLVMRealPredicate.LLVMRealOLT, L.value, R.value, String.valueOf(cnt)), BOOLEAN_LITERAL);
			  } else if (op.equals("<=")){
				  cnt++;
				  return new ASTContent(MyLang.builder.buildFCmp(LLVMRealPredicate.LLVMRealOLE, L.value, R.value, String.valueOf(cnt)),BOOLEAN_LITERAL);
			  } else if (op.equals(">")){
				  cnt++;
				  return new ASTContent(MyLang.builder.buildFCmp(LLVMRealPredicate.LLVMRealOGT, L.value, R.value, String.valueOf(cnt)),BOOLEAN_LITERAL);
			  } else if (op.equals(">=")){
				  cnt++;
				  return new ASTContent(MyLang.builder.buildFCmp(LLVMRealPredicate.LLVMRealOGE, L.value, R.value, String.valueOf(cnt)),BOOLEAN_LITERAL);
			  } 
		  }
	  }
	  throw new Exception("Unknown mistake in ASTRelationalExpression.");
  }

}
/* JavaCC - OriginalChecksum=e55de9480c4b39f10054626b0d7bc92c (do not edit this line) */
