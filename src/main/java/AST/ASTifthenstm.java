package AST;
import org.llvm.BasicBlock;

/* Generated By:JJTree: Do not edit this line. ASTifthenstm.java Version 4.3 */
/* JavaCCOptions:MULTI=true,NODE_USES_PARSER=false,VISITOR=false,TRACK_TOKENS=false,NODE_PREFIX=AST,NODE_EXTENDS=,NODE_FACTORY=,SUPPORT_CLASS_VISIBILITY_PUBLIC=true */
public
class ASTifthenstm extends SimpleNode {
  SimpleNode condExpr,thenBlock,elseBlock;
  public ASTifthenstm(int id) {
    super(id);
  }

  public ASTifthenstm(MyLang p, int id) {
    super(p, id);
  }

  public ASTContent code_gen(ASTContext context) throws Exception{
	  condExpr = (SimpleNode)children[0];
	  thenBlock = (SimpleNode)children[1];
	  if (children.length>2)
		  elseBlock = (SimpleNode)children[2];
	  
	  ASTContent cond = condExpr.code_gen(context);
	  
	  BasicBlock iftrue = context.f_main().appendBasicBlock("iftrue");
      BasicBlock iffalse = context.f_main().appendBasicBlock("iffalse");
      BasicBlock end = context.f_main().appendBasicBlock("endif");
      MyLang.builder.buildCondBr(cond.value, iftrue, iffalse);
      
      MyLang.builder.positionBuilderAtEnd(iftrue);
      ASTContext ifContext=new ASTContext(context, context.entry, context.func);
      thenBlock.code_gen(ifContext);
      MyLang.builder.buildBr(end);
      MyLang.builder.positionBuilderAtEnd(iffalse);
      ASTContext elseContext=new ASTContext(context, context.entry, context.func);
      if (elseBlock!=null)
    	  elseBlock.code_gen(elseContext);
      MyLang.builder.buildBr(end);
      MyLang.builder.positionBuilderAtEnd(end);
      
    /*  Value res = MyLang.builder.buildPhi(TypeRef.int32Type(), "result");
      Value phi_vals[] = {res_iftrue.value, res_iffalse.value};
      BasicBlock phi_blocks[] = { iftrue, iffalse };
      res.addIncoming(phi_vals, phi_blocks, 2);
      MyLang.builder.buildRet(res);*/
	  return null;
  }
}
/* JavaCC - OriginalChecksum=fc73185c69025a5b0a6ed3cca5114eb5 (do not edit this line) */
