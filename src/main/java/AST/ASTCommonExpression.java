package AST;
import org.llvm.Value;

import AST.ASTContent;
import AST.ASTContext;
import AST.MyLang;
import AST.SimpleNode;

/* Generated By:JJTree: Do not edit this line. ASTCommonExpression.java Version 4.3 */
/* JavaCCOptions:MULTI=true,NODE_USES_PARSER=false,VISITOR=false,TRACK_TOKENS=false,NODE_PREFIX=AST,NODE_EXTENDS=,NODE_FACTORY=,SUPPORT_CLASS_VISIBILITY_PUBLIC=true */
public
class ASTCommonExpression extends SimpleNode {
  public ASTCommonExpression(int id) {
    super(id);
  }

  public ASTCommonExpression(MyLang p, int id) {
    super(p, id);
  }

	public ASTContent code_gen(ASTContext context) throws Exception {
		ASTContent L = ((SimpleNode) children[0]).code_gen(context).getPValue();
		if ((children.length & 1) == 0)
			throw new Exception("Length error.");
		
		for (int i = 1; i < children.length; i += 2) 
		{
			SimpleNode c0 = (SimpleNode) children[i];
			SimpleNode c1 = (SimpleNode) children[i + 1];
			if (c0.code_gen(context).type != OPT)
				throw new Exception("Expect a opt");

			int op = c0.jjtGetValue().toString().charAt(0);
			Value RV = c1.code_gen(context).castTo(L.type);
			String name = String.valueOf(++cnt);
			if (L.type == FLOAT_LITERAL) {
				switch (op) {
				case '+':
					L = new ASTContent(MyLang.builder.buildFAdd(L.value, RV, name), L.type);  	break;
				case '-':
					L = new ASTContent(MyLang.builder.buildFSub(L.value, RV, name), L.type);  	break;
				case '*':
					L = new ASTContent(MyLang.builder.buildFMul(L.value, RV, name), L.type);	break;
				case '/':
					L = new ASTContent(MyLang.builder.buildFDiv(L.value, RV, name), L.type); 	break;
				case '%':
					throw new Exception("Error float %.");
				}
			} else {
				switch (op) {
				case '+':
					L = new ASTContent(MyLang.builder.buildAdd(L.value, RV, name), L.type);  	break;
				case '-':
					L = new ASTContent(MyLang.builder.buildSub(L.value, RV, name), L.type);  	break;
				case '*':
					L = new ASTContent(MyLang.builder.buildMul(L.value, RV, name), L.type);  	break;
				case '/':
					L = new ASTContent(MyLang.builder.buildSDiv(L.value, RV, name), L.type);		break;
				case '%':
					L = new ASTContent(MyLang.builder.buildSRem(L.value, RV, name), L.type);	break;
				}
			}
		}
		return L;
	}
}
/* JavaCC - OriginalChecksum=76b25156e332ec9226db9ae858171d79 (do not edit this line) */
