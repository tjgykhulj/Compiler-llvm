package AST;
import org.llvm.BasicBlock;
import org.llvm.TypeRef;
import org.llvm.binding.LLVMLibrary.LLVMIntPredicate;

/* Generated By:JJTree: Do not edit this line. ASTforstm.java Version 4.3 */
/* JavaCCOptions:MULTI=true,NODE_USES_PARSER=false,VISITOR=false,TRACK_TOKENS=false,NODE_PREFIX=AST,NODE_EXTENDS=,NODE_FACTORY=,SUPPORT_CLASS_VISIBILITY_PUBLIC=true */
public
class ASTforstm extends SimpleNode {
  SimpleNode variable,initStmt,limit,block;
  public ASTforstm(int id) {
    super(id);
  }

  public ASTforstm(MyLang p, int id) {
    super(p, id);
  }

  public ASTContent code_gen(ASTContext Context) throws Exception{
	  variable = (SimpleNode)children[0];
	  initStmt = (SimpleNode)children[1];
	  limit = (SimpleNode)children[2];
	  block = (SimpleNode)children[3];
	  ASTContent L = variable.code_gen(Context);
	  ASTContent R = initStmt.code_gen(Context).getPValue();
	  if(L.type != IDENTIFIER)
		  throw new Exception("Left is not IDENTIFIER!");
	  MyLang.builder.buildStore(R.castTo(L.info_type), L.value);
	  
	  BasicBlock forheadBB = Context.f_main().appendBasicBlock("forhead");
      BasicBlock forbodyBB = Context.f_main().appendBasicBlock("forbody");
      BasicBlock forfootBB = Context.f_main().appendBasicBlock("forfoot");
      BasicBlock out = Context.f_main().appendBasicBlock("break");
      MyLang.builder.buildBr(forheadBB);
      
      MyLang.builder.positionBuilderAtEnd(forheadBB);
      L = variable.code_gen(Context).getPValue();
      R = limit.code_gen(Context).getPValue();
      ASTContent cond = new ASTContent(MyLang.builder.buildICmp(LLVMIntPredicate.LLVMIntSLE, 
    		  L.value, R.value, String.valueOf(cnt)), BOOLEAN_LITERAL);
      MyLang.builder.buildCondBr(cond.value , forbodyBB, out);
      
      MyLang.builder.positionBuilderAtEnd(forbodyBB);
      ASTContext bodyContext = new ASTContext(Context, Context.entry, Context.func);
      bodyContext.breakBB = out;
      bodyContext.continueBB = forfootBB;
      block.code_gen(bodyContext);
      MyLang.builder.buildBr(forfootBB);
      
      MyLang.builder.positionBuilderAtEnd(forfootBB);
      L = variable.code_gen(Context).getPValue();
      R = new ASTContent(MyLang.builder.buildAdd(L.value, TypeRef.int32Type().constInt(1, true), String.valueOf(cnt)), L.type);
      L = variable.code_gen(Context);
      MyLang.builder.buildStore(R.castTo(L.info_type), L.value);
      MyLang.builder.buildBr(forheadBB);
      
      BasicBlock end = Context.f_main().appendBasicBlock("endfor");
      MyLang.builder.positionBuilderAtEnd(out);
      MyLang.builder.buildBr(end);
      MyLang.builder.positionBuilderAtEnd(end);
	  return null;
  }
}
/* JavaCC - OriginalChecksum=6780ef439d805b5938754847f8b502b1 (do not edit this line) */
