package AST;
/* Generated By:JJTree: Do not edit this line. ASTShiftExpression.java Version 4.3 */
/* JavaCCOptions:MULTI=true,NODE_USES_PARSER=false,VISITOR=false,TRACK_TOKENS=false,NODE_PREFIX=AST,NODE_EXTENDS=,NODE_FACTORY=,SUPPORT_CLASS_VISIBILITY_PUBLIC=true */
import org.llvm.*;

public
class ASTShiftExpression extends SimpleNode {
  public SimpleNode Lexp, Rexp;
  public String op;
  public ASTShiftExpression(int id) {
    super(id);
  }

  public ASTShiftExpression(MyLang p, int id) {
    super(p, id);
  }
  
  public ASTContent code_gen(ASTContext context) throws Exception{
	  op = jjtGetValue().toString();
	  Lexp = (SimpleNode)children[0];
	  Rexp = (SimpleNode)children[1];
	  ASTContent L = Lexp.code_gen(context).getPValue();
	  ASTContent R = Rexp.code_gen(context).getPValue();
	  if(!R.isAbsolutelyInteger())
		  throw new Exception("RHS must be INT in SHIFT commands.");
	  if(R.isInteger()){
		  if(op.equals("<<")){
			  cnt++;
			  return new ASTContent(MyLang.builder.buildShl(L.value, R.value, String.valueOf(cnt)), L.type);
		  } else if(op.equals(">>")){
			  cnt++;
			  return new ASTContent(MyLang.builder.buildLShr(L.value, R.value, String.valueOf(cnt)), L.type);
		  }
	  }
	  throw new Exception("Unknown exception in ASTShiftExpression.");
  }

}
/* JavaCC - OriginalChecksum=2f2d3a55fbaea0bff84e126aa53b329d (do not edit this line) */
