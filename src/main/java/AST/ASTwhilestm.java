package AST;
import org.llvm.BasicBlock;

/* Generated By:JJTree: Do not edit this line. ASTwhilestm.java Version 4.3 */
/* JavaCCOptions:MULTI=true,NODE_USES_PARSER=false,VISITOR=false,TRACK_TOKENS=false,NODE_PREFIX=AST,NODE_EXTENDS=,NODE_FACTORY=,SUPPORT_CLASS_VISIBILITY_PUBLIC=true */
public
class ASTwhilestm extends SimpleNode {
  SimpleNode condExpr,block;
  public ASTwhilestm(int id) {
    super(id);
  }

  public ASTwhilestm(MyLang p, int id) {
    super(p, id);
  }
  
  public ASTContent code_gen(ASTContext context) throws Exception{
	  condExpr = (SimpleNode)children[0];
	  block = (SimpleNode)children[1];
	  BasicBlock whheadBB = context.f_main().appendBasicBlock("whhead");
      BasicBlock whbodyBB = context.f_main().appendBasicBlock("whbody");
      BasicBlock out = context.f_main().appendBasicBlock("break");
      
      MyLang.builder.buildBr(whheadBB);
      MyLang.builder.positionBuilderAtEnd(whheadBB);
      ASTContext headContext = new ASTContext(context, context.entry, context.func);
      ASTContent cond = condExpr.code_gen(headContext);
      MyLang.builder.buildCondBr(cond.value , whbodyBB, out);
      
      MyLang.builder.positionBuilderAtEnd(whbodyBB);
      ASTContext bodyContext = new ASTContext(context, context.entry, context.func);
      bodyContext.breakBB = out;
      bodyContext.continueBB = whheadBB;
      block.code_gen(bodyContext);
      MyLang.builder.buildBr(whheadBB);
      
      BasicBlock end = context.f_main().appendBasicBlock("endwhile");
      MyLang.builder.positionBuilderAtEnd(out);
      MyLang.builder.buildBr(end);
      MyLang.builder.positionBuilderAtEnd(end);
	  return null;
  }

}
/* JavaCC - OriginalChecksum=0c622d4457e04434f7570fccb9fedca8 (do not edit this line) */
