package AST;
/* Generated By:JJTree&JavaCC: Do not edit this line. MyLangTokenManager.java */

/** Token Manager. */
public class MyLangTokenManager implements MyLangConstants
{

  /** Debug output. */
  public  java.io.PrintStream debugStream = System.out;
  /** Set debug output. */
  public  void setDebugStream(java.io.PrintStream ds) { debugStream = ds; }
private final int jjStopStringLiteralDfa_0(int pos, long active0, long active1)
{
   switch (pos)
   {
      case 0:
         if ((active0 & 0x44101000000L) != 0L)
         {
            jjmatchedKind = 53;
            return 2;
         }
         if ((active0 & 0x20000000040L) != 0L)
         {
            jjmatchedKind = 53;
            return 10;
         }
         if ((active0 & 0x39b6ee777f80L) != 0L)
         {
            jjmatchedKind = 53;
            return 34;
         }
         if ((active0 & 0x810808000L) != 0L)
         {
            jjmatchedKind = 53;
            return 6;
         }
         return -1;
      case 1:
         if ((active0 & 0x1020c1202400L) != 0L)
            return 34;
         if ((active0 & 0x40L) != 0L)
         {
            if (jjmatchedPos != 1)
            {
               jjmatchedKind = 53;
               jjmatchedPos = 1;
            }
            return 9;
         }
         if ((active0 & 0x2fdf3ed7db80L) != 0L)
         {
            if (jjmatchedPos != 1)
            {
               jjmatchedKind = 53;
               jjmatchedPos = 1;
            }
            return 34;
         }
         return -1;
      case 2:
         if ((active0 & 0xa9232c23200L) != 0L)
            return 34;
         if ((active0 & 0x254d0c15c980L) != 0L)
         {
            if (jjmatchedPos != 2)
            {
               jjmatchedKind = 53;
               jjmatchedPos = 2;
            }
            return 34;
         }
         if ((active0 & 0x40L) != 0L)
         {
            if (jjmatchedPos != 2)
            {
               jjmatchedKind = 53;
               jjmatchedPos = 2;
            }
            return 8;
         }
         return -1;
      case 3:
         if ((active0 & 0x244500014040L) != 0L)
            return 34;
         if ((active0 & 0x1081c148980L) != 0L)
         {
            jjmatchedKind = 53;
            jjmatchedPos = 3;
            return 34;
         }
         return -1;
      case 4:
         if ((active0 & 0x8108100L) != 0L)
            return 34;
         if ((active0 & 0x10814040880L) != 0L)
         {
            jjmatchedKind = 53;
            jjmatchedPos = 4;
            return 34;
         }
         return -1;
      case 5:
         if ((active0 & 0x40800L) != 0L)
            return 34;
         if ((active0 & 0x10814000080L) != 0L)
         {
            jjmatchedKind = 53;
            jjmatchedPos = 5;
            return 34;
         }
         return -1;
      case 6:
         if ((active0 & 0x10010000080L) != 0L)
            return 34;
         if ((active0 & 0x804000000L) != 0L)
         {
            if (jjmatchedPos != 6)
            {
               jjmatchedKind = 53;
               jjmatchedPos = 6;
            }
            return 34;
         }
         return -1;
      case 7:
         if ((active0 & 0x804000000L) != 0L)
            return 34;
         return -1;
      default :
         return -1;
   }
}
private final int jjStartNfa_0(int pos, long active0, long active1)
{
   return jjMoveNfa_0(jjStopStringLiteralDfa_0(pos, active0, active1), pos + 1);
}
private int jjStopAtPos(int pos, int kind)
{
   jjmatchedKind = kind;
   jjmatchedPos = pos;
   return pos + 1;
}
private int jjMoveStringLiteralDfa0_0()
{
   switch(curChar)
   {
      case 33:
         return jjMoveStringLiteralDfa1_0(0x8000000000000000L, 0x0L);
      case 37:
         return jjStopAtPos(0, 74);
      case 40:
         return jjStopAtPos(0, 57);
      case 41:
         return jjStopAtPos(0, 59);
      case 42:
         return jjStopAtPos(0, 72);
      case 43:
         return jjStopAtPos(0, 70);
      case 44:
         return jjStopAtPos(0, 58);
      case 45:
         return jjStopAtPos(0, 71);
      case 46:
         return jjStopAtPos(0, 75);
      case 47:
         return jjStopAtPos(0, 73);
      case 59:
         return jjStopAtPos(0, 19);
      case 60:
         jjmatchedKind = 64;
         return jjMoveStringLiteralDfa1_0(0x0L, 0x24L);
      case 61:
         jjmatchedKind = 46;
         return jjMoveStringLiteralDfa1_0(0x4000000000000000L, 0x0L);
      case 62:
         jjmatchedKind = 65;
         return jjMoveStringLiteralDfa1_0(0x0L, 0x18L);
      case 91:
         return jjStopAtPos(0, 60);
      case 93:
         return jjStopAtPos(0, 61);
      case 97:
         return jjMoveStringLiteralDfa1_0(0x80000000400L, 0x0L);
      case 98:
         return jjMoveStringLiteralDfa1_0(0x8004100L, 0x0L);
      case 99:
         return jjMoveStringLiteralDfa1_0(0x4010000L, 0x0L);
      case 100:
         return jjMoveStringLiteralDfa1_0(0x200800L, 0x0L);
      case 101:
         return jjMoveStringLiteralDfa1_0(0x19622421200L, 0x0L);
      case 102:
         return jjMoveStringLiteralDfa1_0(0x810808000L, 0x0L);
      case 105:
         return jjMoveStringLiteralDfa1_0(0x20c0002000L, 0x0L);
      case 110:
         return jjMoveStringLiteralDfa1_0(0x20000000040L, 0x0L);
      case 111:
         return jjMoveStringLiteralDfa1_0(0x100000000000L, 0x0L);
      case 112:
         return jjMoveStringLiteralDfa1_0(0x80L, 0x0L);
      case 114:
         return jjMoveStringLiteralDfa1_0(0x40000L, 0x0L);
      case 116:
         return jjMoveStringLiteralDfa1_0(0x44101000000L, 0x0L);
      case 118:
         return jjMoveStringLiteralDfa1_0(0x200000000000L, 0x0L);
      case 119:
         return jjMoveStringLiteralDfa1_0(0x100000L, 0x0L);
      default :
         return jjMoveNfa_0(3, 0);
   }
}
private int jjMoveStringLiteralDfa1_0(long active0, long active1)
{
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(0, active0, active1);
      return 1;
   }
   switch(curChar)
   {
      case 60:
         if ((active1 & 0x20L) != 0L)
            return jjStopAtPos(1, 69);
         break;
      case 61:
         if ((active0 & 0x4000000000000000L) != 0L)
            return jjStopAtPos(1, 62);
         else if ((active0 & 0x8000000000000000L) != 0L)
            return jjStopAtPos(1, 63);
         else if ((active1 & 0x4L) != 0L)
            return jjStopAtPos(1, 66);
         else if ((active1 & 0x8L) != 0L)
            return jjStopAtPos(1, 67);
         break;
      case 62:
         if ((active1 & 0x10L) != 0L)
            return jjStopAtPos(1, 68);
         break;
      case 101:
         return jjMoveStringLiteralDfa2_0(active0, 0x40900L, active1, 0L);
      case 102:
         if ((active0 & 0x80000000L) != 0L)
            return jjStartNfaWithStates_0(1, 31, 34);
         break;
      case 104:
         return jjMoveStringLiteralDfa2_0(active0, 0x40100110000L, active1, 0L);
      case 108:
         return jjMoveStringLiteralDfa2_0(active0, 0x400008000L, active1, 0L);
      case 110:
         if ((active0 & 0x40000000L) != 0L)
         {
            jjmatchedKind = 30;
            jjmatchedPos = 1;
         }
         return jjMoveStringLiteralDfa2_0(active0, 0x89222403200L, active1, 0L);
      case 111:
         if ((active0 & 0x200000L) != 0L)
            return jjStartNfaWithStates_0(1, 21, 34);
         else if ((active0 & 0x1000000L) != 0L)
            return jjStartNfaWithStates_0(1, 24, 34);
         return jjMoveStringLiteralDfa2_0(active0, 0x220014804000L, active1, 0L);
      case 114:
         if ((active0 & 0x100000000000L) != 0L)
            return jjStartNfaWithStates_0(1, 44, 34);
         return jjMoveStringLiteralDfa2_0(active0, 0x8000080L, active1, 0L);
      case 115:
         if ((active0 & 0x400L) != 0L)
            return jjStartNfaWithStates_0(1, 10, 34);
         else if ((active0 & 0x2000000000L) != 0L)
            return jjStartNfaWithStates_0(1, 37, 34);
         break;
      case 117:
         return jjMoveStringLiteralDfa2_0(active0, 0x800000040L, active1, 0L);
      case 120:
         return jjMoveStringLiteralDfa2_0(active0, 0x10000020000L, active1, 0L);
      case 121:
         return jjMoveStringLiteralDfa2_0(active0, 0x4000000000L, active1, 0L);
      default :
         break;
   }
   return jjStartNfa_0(0, active0, active1);
}
private int jjMoveStringLiteralDfa2_0(long old0, long active0, long old1, long active1)
{
   if (((active0 &= old0) | (active1 &= old1)) == 0L)
      return jjStartNfa_0(0, old0, old1);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(1, active0, 0L);
      return 2;
   }
   switch(curChar)
   {
      case 97:
         return jjMoveStringLiteralDfa3_0(active0, 0x10000L);
      case 100:
         if ((active0 & 0x200L) != 0L)
         {
            jjmatchedKind = 9;
            jjmatchedPos = 2;
         }
         else if ((active0 & 0x80000000000L) != 0L)
            return jjStartNfaWithStates_0(2, 43, 34);
         return jjMoveStringLiteralDfa3_0(active0, 0x9222401000L);
      case 101:
         return jjMoveStringLiteralDfa3_0(active0, 0x108000000L);
      case 102:
         return jjMoveStringLiteralDfa3_0(active0, 0x800L);
      case 103:
         return jjMoveStringLiteralDfa3_0(active0, 0x100L);
      case 105:
         return jjMoveStringLiteralDfa3_0(active0, 0x240000100000L);
      case 108:
         return jjMoveStringLiteralDfa3_0(active0, 0x40L);
      case 110:
         return jjMoveStringLiteralDfa3_0(active0, 0x804000000L);
      case 111:
         return jjMoveStringLiteralDfa3_0(active0, 0xc080L);
      case 112:
         if ((active0 & 0x20000L) != 0L)
            return jjStartNfaWithStates_0(2, 17, 34);
         return jjMoveStringLiteralDfa3_0(active0, 0x4000000000L);
      case 114:
         if ((active0 & 0x800000L) != 0L)
         {
            jjmatchedKind = 23;
            jjmatchedPos = 2;
         }
         return jjMoveStringLiteralDfa3_0(active0, 0x10000000L);
      case 115:
         return jjMoveStringLiteralDfa3_0(active0, 0x400000000L);
      case 116:
         if ((active0 & 0x2000L) != 0L)
            return jjStartNfaWithStates_0(2, 13, 34);
         else if ((active0 & 0x20000000000L) != 0L)
            return jjStartNfaWithStates_0(2, 41, 34);
         return jjMoveStringLiteralDfa3_0(active0, 0x10000040000L);
      default :
         break;
   }
   return jjStartNfa_0(1, active0, 0L);
}
private int jjMoveStringLiteralDfa3_0(long old0, long active0)
{
   if (((active0 &= old0)) == 0L)
      return jjStartNfa_0(1, old0, 0L);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(2, active0, 0L);
      return 3;
   }
   switch(curChar)
   {
      case 32:
         return jjMoveStringLiteralDfa4_0(active0, 0x9222401000L);
      case 97:
         return jjMoveStringLiteralDfa4_0(active0, 0x8008000L);
      case 99:
         return jjMoveStringLiteralDfa4_0(active0, 0x800000000L);
      case 100:
         if ((active0 & 0x200000000000L) != 0L)
            return jjStartNfaWithStates_0(3, 45, 34);
         break;
      case 101:
         if ((active0 & 0x400000000L) != 0L)
            return jjStartNfaWithStates_0(3, 34, 34);
         else if ((active0 & 0x4000000000L) != 0L)
            return jjStartNfaWithStates_0(3, 38, 34);
         return jjMoveStringLiteralDfa4_0(active0, 0x10010000000L);
      case 103:
         return jjMoveStringLiteralDfa4_0(active0, 0x80L);
      case 105:
         return jjMoveStringLiteralDfa4_0(active0, 0x900L);
      case 108:
         if ((active0 & 0x40L) != 0L)
            return jjStartNfaWithStates_0(3, 6, 34);
         else if ((active0 & 0x4000L) != 0L)
            return jjStartNfaWithStates_0(3, 14, 34);
         return jjMoveStringLiteralDfa4_0(active0, 0x100000L);
      case 110:
         if ((active0 & 0x100000000L) != 0L)
            return jjStartNfaWithStates_0(3, 32, 34);
         break;
      case 114:
         if ((active0 & 0x10000L) != 0L)
            return jjStartNfaWithStates_0(3, 16, 34);
         break;
      case 115:
         if ((active0 & 0x40000000000L) != 0L)
            return jjStartNfaWithStates_0(3, 42, 34);
         break;
      case 116:
         return jjMoveStringLiteralDfa4_0(active0, 0x4000000L);
      case 117:
         return jjMoveStringLiteralDfa4_0(active0, 0x40000L);
      default :
         break;
   }
   return jjStartNfa_0(2, active0, 0L);
}
private int jjMoveStringLiteralDfa4_0(long old0, long active0)
{
   if (((active0 &= old0)) == 0L)
      return jjStartNfa_0(2, old0, 0L);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(3, active0, 0L);
      return 4;
   }
   switch(curChar)
   {
      case 97:
         return jjMoveStringLiteralDfa5_0(active0, 0x10000000L);
      case 100:
         return jjMoveStringLiteralDfa5_0(active0, 0x1000L);
      case 101:
         if ((active0 & 0x100000L) != 0L)
            return jjStartNfaWithStates_0(4, 20, 34);
         break;
      case 102:
         return jjMoveStringLiteralDfa5_0(active0, 0x1022000000L);
      case 105:
         return jjMoveStringLiteralDfa5_0(active0, 0x204000000L);
      case 107:
         if ((active0 & 0x8000000L) != 0L)
            return jjStartNfaWithStates_0(4, 27, 34);
         break;
      case 110:
         if ((active0 & 0x100L) != 0L)
            return jjStartNfaWithStates_0(4, 8, 34);
         return jjMoveStringLiteralDfa5_0(active0, 0x10000000800L);
      case 114:
         return jjMoveStringLiteralDfa5_0(active0, 0x40080L);
      case 116:
         if ((active0 & 0x8000L) != 0L)
            return jjStartNfaWithStates_0(4, 15, 34);
         return jjMoveStringLiteralDfa5_0(active0, 0x8800000000L);
      case 119:
         return jjMoveStringLiteralDfa5_0(active0, 0x400000L);
      default :
         break;
   }
   return jjStartNfa_0(3, active0, 0L);
}
private int jjMoveStringLiteralDfa5_0(long old0, long active0)
{
   if (((active0 &= old0)) == 0L)
      return jjStartNfa_0(3, old0, 0L);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(4, active0, 0L);
      return 5;
   }
   switch(curChar)
   {
      case 97:
         return jjMoveStringLiteralDfa6_0(active0, 0x80L);
      case 99:
         return jjMoveStringLiteralDfa6_0(active0, 0x10000000L);
      case 100:
         return jjMoveStringLiteralDfa6_0(active0, 0x10000000000L);
      case 101:
         if ((active0 & 0x800L) != 0L)
            return jjStartNfaWithStates_0(5, 11, 34);
         return jjMoveStringLiteralDfa6_0(active0, 0x1000L);
      case 102:
         if ((active0 & 0x200000000L) != 0L)
            return jjStopAtPos(5, 33);
         break;
      case 104:
         return jjMoveStringLiteralDfa6_0(active0, 0x400000L);
      case 105:
         return jjMoveStringLiteralDfa6_0(active0, 0x800000000L);
      case 110:
         if ((active0 & 0x40000L) != 0L)
            return jjStartNfaWithStates_0(5, 18, 34);
         return jjMoveStringLiteralDfa6_0(active0, 0x4000000L);
      case 111:
         return jjMoveStringLiteralDfa6_0(active0, 0x22000000L);
      case 117:
         return jjMoveStringLiteralDfa6_0(active0, 0x1000000000L);
      case 121:
         return jjMoveStringLiteralDfa6_0(active0, 0x8000000000L);
      default :
         break;
   }
   return jjStartNfa_0(4, active0, 0L);
}
private int jjMoveStringLiteralDfa6_0(long old0, long active0)
{
   if (((active0 &= old0)) == 0L)
      return jjStartNfa_0(4, old0, 0L);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(5, active0, 0L);
      return 6;
   }
   switch(curChar)
   {
      case 102:
         return jjMoveStringLiteralDfa7_0(active0, 0x1000L);
      case 104:
         if ((active0 & 0x10000000L) != 0L)
            return jjStartNfaWithStates_0(6, 28, 34);
         break;
      case 105:
         return jjMoveStringLiteralDfa7_0(active0, 0x400000L);
      case 109:
         if ((active0 & 0x80L) != 0L)
            return jjStartNfaWithStates_0(6, 7, 34);
         break;
      case 110:
         return jjMoveStringLiteralDfa7_0(active0, 0x1000000000L);
      case 111:
         return jjMoveStringLiteralDfa7_0(active0, 0x800000000L);
      case 112:
         return jjMoveStringLiteralDfa7_0(active0, 0x8000000000L);
      case 114:
         if ((active0 & 0x2000000L) != 0L)
         {
            jjmatchedKind = 25;
            jjmatchedPos = 6;
         }
         return jjMoveStringLiteralDfa7_0(active0, 0x20000000L);
      case 115:
         if ((active0 & 0x10000000000L) != 0L)
            return jjStartNfaWithStates_0(6, 40, 34);
         break;
      case 117:
         return jjMoveStringLiteralDfa7_0(active0, 0x4000000L);
      default :
         break;
   }
   return jjStartNfa_0(5, active0, 0L);
}
private int jjMoveStringLiteralDfa7_0(long old0, long active0)
{
   if (((active0 &= old0)) == 0L)
      return jjStartNfa_0(5, old0, 0L);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(6, active0, 0L);
      return 7;
   }
   switch(curChar)
   {
      case 99:
         return jjMoveStringLiteralDfa8_0(active0, 0x1000000000L);
      case 101:
         if ((active0 & 0x4000000L) != 0L)
            return jjStartNfaWithStates_0(7, 26, 34);
         else if ((active0 & 0x8000000000L) != 0L)
            return jjStopAtPos(7, 39);
         return jjMoveStringLiteralDfa8_0(active0, 0x20000000L);
      case 105:
         return jjMoveStringLiteralDfa8_0(active0, 0x1000L);
      case 108:
         return jjMoveStringLiteralDfa8_0(active0, 0x400000L);
      case 110:
         if ((active0 & 0x800000000L) != 0L)
            return jjStartNfaWithStates_0(7, 35, 34);
         break;
      default :
         break;
   }
   return jjStartNfa_0(6, active0, 0L);
}
private int jjMoveStringLiteralDfa8_0(long old0, long active0)
{
   if (((active0 &= old0)) == 0L)
      return jjStartNfa_0(6, old0, 0L);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(7, active0, 0L);
      return 8;
   }
   switch(curChar)
   {
      case 97:
         return jjMoveStringLiteralDfa9_0(active0, 0x20000000L);
      case 101:
         if ((active0 & 0x400000L) != 0L)
            return jjStopAtPos(8, 22);
         break;
      case 110:
         return jjMoveStringLiteralDfa9_0(active0, 0x1000L);
      case 116:
         return jjMoveStringLiteralDfa9_0(active0, 0x1000000000L);
      default :
         break;
   }
   return jjStartNfa_0(7, active0, 0L);
}
private int jjMoveStringLiteralDfa9_0(long old0, long active0)
{
   if (((active0 &= old0)) == 0L)
      return jjStartNfa_0(7, old0, 0L);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(8, active0, 0L);
      return 9;
   }
   switch(curChar)
   {
      case 99:
         return jjMoveStringLiteralDfa10_0(active0, 0x20000000L);
      case 101:
         if ((active0 & 0x1000L) != 0L)
            return jjStopAtPos(9, 12);
         break;
      case 105:
         return jjMoveStringLiteralDfa10_0(active0, 0x1000000000L);
      default :
         break;
   }
   return jjStartNfa_0(8, active0, 0L);
}
private int jjMoveStringLiteralDfa10_0(long old0, long active0)
{
   if (((active0 &= old0)) == 0L)
      return jjStartNfa_0(8, old0, 0L);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(9, active0, 0L);
      return 10;
   }
   switch(curChar)
   {
      case 104:
         if ((active0 & 0x20000000L) != 0L)
            return jjStopAtPos(10, 29);
         break;
      case 111:
         return jjMoveStringLiteralDfa11_0(active0, 0x1000000000L);
      default :
         break;
   }
   return jjStartNfa_0(9, active0, 0L);
}
private int jjMoveStringLiteralDfa11_0(long old0, long active0)
{
   if (((active0 &= old0)) == 0L)
      return jjStartNfa_0(9, old0, 0L);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(10, active0, 0L);
      return 11;
   }
   switch(curChar)
   {
      case 110:
         if ((active0 & 0x1000000000L) != 0L)
            return jjStopAtPos(11, 36);
         break;
      default :
         break;
   }
   return jjStartNfa_0(10, active0, 0L);
}
private int jjStartNfaWithStates_0(int pos, int kind, int state)
{
   jjmatchedKind = kind;
   jjmatchedPos = pos;
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) { return pos + 1; }
   return jjMoveNfa_0(state, pos + 1);
}
static final long[] jjbitVec0 = {
   0x0L, 0x0L, 0xffffffffffffffffL, 0xffffffffffffffffL
};
private int jjMoveNfa_0(int startState, int curPos)
{
   int startsAt = 0;
   jjnewStateCnt = 35;
   int i = 1;
   jjstateSet[0] = startState;
   int kind = 0x7fffffff;
   for (;;)
   {
      if (++jjround == 0x7fffffff)
         ReInitRounds();
      if (curChar < 64)
      {
         long l = 1L << curChar;
         do
         {
            switch(jjstateSet[--i])
            {
               case 9:
               case 34:
                  if ((0x3ff000000000000L & l) == 0L)
                     break;
                  if (kind > 53)
                     kind = 53;
                  jjCheckNAdd(34);
                  break;
               case 8:
                  if ((0x3ff000000000000L & l) == 0L)
                     break;
                  if (kind > 53)
                     kind = 53;
                  jjCheckNAdd(34);
                  break;
               case 6:
                  if ((0x3ff000000000000L & l) == 0L)
                     break;
                  if (kind > 53)
                     kind = 53;
                  jjCheckNAdd(34);
                  break;
               case 10:
                  if ((0x3ff000000000000L & l) == 0L)
                     break;
                  if (kind > 53)
                     kind = 53;
                  jjCheckNAdd(34);
                  break;
               case 2:
                  if ((0x3ff000000000000L & l) == 0L)
                     break;
                  if (kind > 53)
                     kind = 53;
                  jjCheckNAdd(34);
                  break;
               case 3:
                  if ((0x3ff000000000000L & l) != 0L)
                  {
                     if (kind > 47)
                        kind = 47;
                     jjCheckNAddStates(0, 4);
                  }
                  else if (curChar == 34)
                     jjCheckNAddStates(5, 7);
                  else if (curChar == 39)
                     jjAddStates(8, 9);
                  break;
               case 12:
                  if (curChar == 39)
                     jjAddStates(8, 9);
                  break;
               case 13:
                  if ((0xffffff7fffffdbffL & l) != 0L)
                     jjCheckNAdd(14);
                  break;
               case 14:
                  if (curChar == 39 && kind > 51)
                     kind = 51;
                  break;
               case 16:
                  if ((0x8400000000L & l) != 0L)
                     jjCheckNAdd(14);
                  break;
               case 17:
                  if (curChar == 34)
                     jjCheckNAddStates(5, 7);
                  break;
               case 18:
                  if ((0xfffffffbffffdbffL & l) != 0L)
                     jjCheckNAddStates(5, 7);
                  break;
               case 20:
                  if ((0x8400000000L & l) != 0L)
                     jjCheckNAddStates(5, 7);
                  break;
               case 21:
                  if (curChar == 34 && kind > 52)
                     kind = 52;
                  break;
               case 22:
                  if ((0xff000000000000L & l) != 0L)
                     jjCheckNAddStates(10, 13);
                  break;
               case 23:
                  if ((0xff000000000000L & l) != 0L)
                     jjCheckNAddStates(5, 7);
                  break;
               case 24:
                  if ((0xf000000000000L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 25;
                  break;
               case 25:
                  if ((0xff000000000000L & l) != 0L)
                     jjCheckNAdd(23);
                  break;
               case 26:
                  if ((0x3ff000000000000L & l) == 0L)
                     break;
                  if (kind > 47)
                     kind = 47;
                  jjCheckNAddStates(0, 4);
                  break;
               case 27:
                  if ((0x3ff000000000000L & l) == 0L)
                     break;
                  if (kind > 47)
                     kind = 47;
                  jjCheckNAddTwoStates(27, 28);
                  break;
               case 29:
                  if ((0x3ff000000000000L & l) != 0L)
                     jjCheckNAddTwoStates(29, 30);
                  break;
               case 30:
                  if (curChar == 46)
                     jjCheckNAdd(31);
                  break;
               case 31:
                  if ((0x3ff000000000000L & l) == 0L)
                     break;
                  if (kind > 48)
                     kind = 48;
                  jjCheckNAdd(31);
                  break;
               case 32:
                  if ((0x3ff000000000000L & l) == 0L)
                     break;
                  if (kind > 54)
                     kind = 54;
                  jjCheckNAdd(32);
                  break;
               default : break;
            }
         } while(i != startsAt);
      }
      else if (curChar < 128)
      {
         long l = 1L << (curChar & 077);
         do
         {
            switch(jjstateSet[--i])
            {
               case 9:
                  if ((0x7fffffe87fffffeL & l) != 0L)
                  {
                     if (kind > 53)
                        kind = 53;
                     jjCheckNAdd(34);
                  }
                  if (curChar == 108)
                     jjstateSet[jjnewStateCnt++] = 8;
                  break;
               case 8:
                  if ((0x7fffffe87fffffeL & l) != 0L)
                  {
                     if (kind > 53)
                        kind = 53;
                     jjCheckNAdd(34);
                  }
                  if (curChar == 108)
                  {
                     if (kind > 50)
                        kind = 50;
                  }
                  break;
               case 6:
                  if ((0x7fffffe87fffffeL & l) != 0L)
                  {
                     if (kind > 53)
                        kind = 53;
                     jjCheckNAdd(34);
                  }
                  if (curChar == 97)
                     jjstateSet[jjnewStateCnt++] = 5;
                  break;
               case 10:
                  if ((0x7fffffe87fffffeL & l) != 0L)
                  {
                     if (kind > 53)
                        kind = 53;
                     jjCheckNAdd(34);
                  }
                  if (curChar == 117)
                     jjstateSet[jjnewStateCnt++] = 9;
                  break;
               case 2:
                  if ((0x7fffffe87fffffeL & l) != 0L)
                  {
                     if (kind > 53)
                        kind = 53;
                     jjCheckNAdd(34);
                  }
                  if (curChar == 114)
                     jjstateSet[jjnewStateCnt++] = 1;
                  break;
               case 3:
                  if ((0x7fffffe87fffffeL & l) != 0L)
                  {
                     if (kind > 53)
                        kind = 53;
                     jjCheckNAdd(34);
                  }
                  if (curChar == 110)
                     jjstateSet[jjnewStateCnt++] = 10;
                  else if (curChar == 102)
                     jjstateSet[jjnewStateCnt++] = 6;
                  else if (curChar == 116)
                     jjstateSet[jjnewStateCnt++] = 2;
                  break;
               case 0:
                  if (curChar == 101 && kind > 49)
                     kind = 49;
                  break;
               case 1:
                  if (curChar == 117)
                     jjCheckNAdd(0);
                  break;
               case 4:
                  if (curChar == 115)
                     jjCheckNAdd(0);
                  break;
               case 5:
                  if (curChar == 108)
                     jjstateSet[jjnewStateCnt++] = 4;
                  break;
               case 7:
                  if (curChar == 102)
                     jjstateSet[jjnewStateCnt++] = 6;
                  break;
               case 11:
                  if (curChar == 110)
                     jjstateSet[jjnewStateCnt++] = 10;
                  break;
               case 13:
                  if ((0xffffffffefffffffL & l) != 0L)
                     jjCheckNAdd(14);
                  break;
               case 15:
                  if (curChar == 92)
                     jjstateSet[jjnewStateCnt++] = 16;
                  break;
               case 16:
                  if ((0x400010000000L & l) != 0L)
                     jjCheckNAdd(14);
                  break;
               case 18:
                  if ((0xffffffffefffffffL & l) != 0L)
                     jjCheckNAddStates(5, 7);
                  break;
               case 19:
                  if (curChar == 92)
                     jjAddStates(14, 16);
                  break;
               case 20:
                  if ((0x14404410000000L & l) != 0L)
                     jjCheckNAddStates(5, 7);
                  break;
               case 28:
                  if ((0x100000001000L & l) != 0L && kind > 47)
                     kind = 47;
                  break;
               case 33:
                  if ((0x7fffffe87fffffeL & l) == 0L)
                     break;
                  if (kind > 53)
                     kind = 53;
                  jjCheckNAdd(34);
                  break;
               case 34:
                  if ((0x7fffffe87fffffeL & l) == 0L)
                     break;
                  if (kind > 53)
                     kind = 53;
                  jjCheckNAdd(34);
                  break;
               default : break;
            }
         } while(i != startsAt);
      }
      else
      {
         int i2 = (curChar & 0xff) >> 6;
         long l2 = 1L << (curChar & 077);
         do
         {
            switch(jjstateSet[--i])
            {
               case 13:
                  if ((jjbitVec0[i2] & l2) != 0L)
                     jjstateSet[jjnewStateCnt++] = 14;
                  break;
               case 18:
                  if ((jjbitVec0[i2] & l2) != 0L)
                     jjAddStates(5, 7);
                  break;
               default : break;
            }
         } while(i != startsAt);
      }
      if (kind != 0x7fffffff)
      {
         jjmatchedKind = kind;
         jjmatchedPos = curPos;
         kind = 0x7fffffff;
      }
      ++curPos;
      if ((i = jjnewStateCnt) == (startsAt = 35 - (jjnewStateCnt = startsAt)))
         return curPos;
      try { curChar = input_stream.readChar(); }
      catch(java.io.IOException e) { return curPos; }
   }
}
static final int[] jjnextStates = {
   27, 28, 29, 30, 32, 18, 19, 21, 13, 15, 18, 19, 23, 21, 20, 22, 
   24, 
};

/** Token literal values. */
public static final String[] jjstrLiteralImages = {
"", null, null, null, null, null, "\156\165\154\154", 
"\160\162\157\147\162\141\155", "\142\145\147\151\156", "\145\156\144", "\141\163", 
"\144\145\146\151\156\145", "\145\156\144\40\144\145\146\151\156\145", "\151\156\164", "\142\157\157\154", 
"\146\154\157\141\164", "\143\150\141\162", "\145\170\160", "\162\145\164\165\162\156", "\73", 
"\167\150\151\154\145", "\144\157", "\145\156\144\40\167\150\151\154\145", "\146\157\162", "\164\157", 
"\145\156\144\40\146\157\162", "\143\157\156\164\151\156\165\145", "\142\162\145\141\153", 
"\146\157\162\145\141\143\150", "\145\156\144\40\146\157\162\145\141\143\150", "\151\156", "\151\146", 
"\164\150\145\156", "\145\156\144\40\151\146", "\145\154\163\145", 
"\146\165\156\143\164\151\157\156", "\145\156\144\40\146\165\156\143\164\151\157\156", "\151\163", 
"\164\171\160\145", "\145\156\144\40\164\171\160\145", "\145\170\164\145\156\144\163", 
"\156\157\164", "\164\150\151\163", "\141\156\144", "\157\162", "\166\157\151\144", "\75", 
null, null, null, null, null, null, null, null, null, null, "\50", "\54", "\51", 
"\133", "\135", "\75\75", "\41\75", "\74", "\76", "\74\75", "\76\75", "\76\76", 
"\74\74", "\53", "\55", "\52", "\57", "\45", "\56", };

/** Lexer state names. */
public static final String[] lexStateNames = {
   "DEFAULT",
};
static final long[] jjtoToken = {
   0xffffffffffffffc1L, 0xfffL, 
};
static final long[] jjtoSkip = {
   0x3eL, 0x0L, 
};
protected SimpleCharStream input_stream;
private final int[] jjrounds = new int[35];
private final int[] jjstateSet = new int[70];
protected char curChar;
/** Constructor. */
public MyLangTokenManager(SimpleCharStream stream){
   if (SimpleCharStream.staticFlag)
      throw new Error("ERROR: Cannot use a static CharStream class with a non-static lexical analyzer.");
   input_stream = stream;
}

/** Constructor. */
public MyLangTokenManager(SimpleCharStream stream, int lexState){
   this(stream);
   SwitchTo(lexState);
}

/** Reinitialise parser. */
public void ReInit(SimpleCharStream stream)
{
   jjmatchedPos = jjnewStateCnt = 0;
   curLexState = defaultLexState;
   input_stream = stream;
   ReInitRounds();
}
private void ReInitRounds()
{
   int i;
   jjround = 0x80000001;
   for (i = 35; i-- > 0;)
      jjrounds[i] = 0x80000000;
}

/** Reinitialise parser. */
public void ReInit(SimpleCharStream stream, int lexState)
{
   ReInit(stream);
   SwitchTo(lexState);
}

/** Switch to specified lex state. */
public void SwitchTo(int lexState)
{
   if (lexState >= 1 || lexState < 0)
      throw new TokenMgrError("Error: Ignoring invalid lexical state : " + lexState + ". State unchanged.", TokenMgrError.INVALID_LEXICAL_STATE);
   else
      curLexState = lexState;
}

protected Token jjFillToken()
{
   final Token t;
   final String curTokenImage;
   final int beginLine;
   final int endLine;
   final int beginColumn;
   final int endColumn;
   String im = jjstrLiteralImages[jjmatchedKind];
   curTokenImage = (im == null) ? input_stream.GetImage() : im;
   beginLine = input_stream.getBeginLine();
   beginColumn = input_stream.getBeginColumn();
   endLine = input_stream.getEndLine();
   endColumn = input_stream.getEndColumn();
   t = Token.newToken(jjmatchedKind, curTokenImage);

   t.beginLine = beginLine;
   t.endLine = endLine;
   t.beginColumn = beginColumn;
   t.endColumn = endColumn;

   return t;
}

int curLexState = 0;
int defaultLexState = 0;
int jjnewStateCnt;
int jjround;
int jjmatchedPos;
int jjmatchedKind;

/** Get the next Token. */
public Token getNextToken() 
{
  Token matchedToken;
  int curPos = 0;

  EOFLoop :
  for (;;)
  {
   try
   {
      curChar = input_stream.BeginToken();
   }
   catch(java.io.IOException e)
   {
      jjmatchedKind = 0;
      matchedToken = jjFillToken();
      return matchedToken;
   }

   try { input_stream.backup(0);
      while (curChar <= 32 && (0x100003600L & (1L << curChar)) != 0L)
         curChar = input_stream.BeginToken();
   }
   catch (java.io.IOException e1) { continue EOFLoop; }
   jjmatchedKind = 0x7fffffff;
   jjmatchedPos = 0;
   curPos = jjMoveStringLiteralDfa0_0();
   if (jjmatchedKind != 0x7fffffff)
   {
      if (jjmatchedPos + 1 < curPos)
         input_stream.backup(curPos - jjmatchedPos - 1);
      if ((jjtoToken[jjmatchedKind >> 6] & (1L << (jjmatchedKind & 077))) != 0L)
      {
         matchedToken = jjFillToken();
         return matchedToken;
      }
      else
      {
         continue EOFLoop;
      }
   }
   int error_line = input_stream.getEndLine();
   int error_column = input_stream.getEndColumn();
   String error_after = null;
   boolean EOFSeen = false;
   try { input_stream.readChar(); input_stream.backup(1); }
   catch (java.io.IOException e1) {
      EOFSeen = true;
      error_after = curPos <= 1 ? "" : input_stream.GetImage();
      if (curChar == '\n' || curChar == '\r') {
         error_line++;
         error_column = 0;
      }
      else
         error_column++;
   }
   if (!EOFSeen) {
      input_stream.backup(1);
      error_after = curPos <= 1 ? "" : input_stream.GetImage();
   }
   throw new TokenMgrError(EOFSeen, curLexState, error_line, error_column, error_after, curChar, TokenMgrError.LEXICAL_ERROR);
  }
}

private void jjCheckNAdd(int state)
{
   if (jjrounds[state] != jjround)
   {
      jjstateSet[jjnewStateCnt++] = state;
      jjrounds[state] = jjround;
   }
}
private void jjAddStates(int start, int end)
{
   do {
      jjstateSet[jjnewStateCnt++] = jjnextStates[start];
   } while (start++ != end);
}
private void jjCheckNAddTwoStates(int state1, int state2)
{
   jjCheckNAdd(state1);
   jjCheckNAdd(state2);
}

private void jjCheckNAddStates(int start, int end)
{
   do {
      jjCheckNAdd(jjnextStates[start]);
   } while (start++ != end);
}

}