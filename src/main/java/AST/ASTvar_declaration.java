package AST;
import java.util.ArrayList;
import java.util.List;

import org.llvm.*;

/* Generated By:JJTree: Do not edit this line. ASTvar_declaration.java Version 4.3 */
/* JavaCCOptions:MULTI=true,NODE_USES_PARSER=false,VISITOR=false,TRACK_TOKENS=false,NODE_PREFIX=AST,NODE_EXTENDS=,NODE_FACTORY=,SUPPORT_CLASS_VISIBILITY_PUBLIC=true */
public class ASTvar_declaration extends SimpleNode {
	
	public ASTvar_declaration(int id) {
		super(id);
	}

	public ASTvar_declaration(MyLang p, int id) {
		super(p, id);
	}

	@Override
	public ASTContent code_gen(ASTContext context) throws Exception {
		if (children == null) return null;
	    List<ASTContent> contents = new ArrayList<ASTContent>();	    //用于存储定义变量值
	    List<ASTContent> childList = new ArrayList<ASTContent>();
	    int del_type = 0;			//判断此处定义类型
		for (int i = 0; i < children.length; ++i) 
		{
			SimpleNode n = (SimpleNode)children[i];
			ASTContent x = n.code_gen(context);
			if (x.type == TYPE) {  
				del_type = x.info_type;
			} else
				if (del_type == 0) {
					if (x.value != null) x = null;
					childList.add(x);
				}
				else
					contents.add(x);
		}
		if (del_type == 0) return null;
		if (del_type == CLASS){
			String name = ((SimpleNode)((SimpleNode) children[childList.size()]).children[0])
					.jjtGetValue().toString();
			ASTClassContent clco = (ASTClassContent)context.get(name);
			SimpleNode now = clco.sn;
			for (int i=0;i<childList.size();i++){
				String namechild = ((SimpleNode) children[i]).jjtGetValue().toString();
				ASTContext newContext = new ASTContext();//context, context.entry, context.func);
				newContext.entry = context.entry;
				while (true){
					for (int j=1;j<now.children.length;j++){
						((SimpleNode)now.children[j]).code_gen(newContext);
					}
					if (((SimpleNode)now.children[1]).jjtGetValue()!=null){
						name = ((SimpleNode)now.children[1]).jjtGetValue().toString();
						clco = (ASTClassContent)context.get(name);
						now = clco.sn;
						newContext.isExtending = true;
					}else
						break;
				}
				newContext.isExtending = false;
				newContext.father = context;
				context.put(namechild,newContext);
			}
			return new ASTContent(null, DEFINE);
		}
		
        Value tmp;
	    for (int i=0; i<childList.size(); i++)
	    {
	    	if (childList.get(i) == null) continue;
	    	ASTContent x = (i >= contents.size()) ? null : contents.get(i);
	    	String name = ((SimpleNode) children[i]).jjtGetValue().toString();
	    	ASTContent child = childList.get(i);
    		TypeRef type = ASTContent.getTypeRef(del_type);
	    	if(child.type == IDENTIFIER){
	    		if (context.isMain()) {
	    			tmp = MyLang.module.addGlobal(type, name);
				    tmp.setInitializer(ASTContent.getTypeZero(del_type));
	    		} else
	    			tmp = MyLang.builder.buildAlloca(type.type(), name);
		    	if (i < contents.size())
		    		MyLang.builder.buildStore(x.castTo(del_type), tmp);
		        context.put(name, tmp, IDENTIFIER, del_type);
	    	} else if (child.type == ARRAY) {
	    		String info[] = name.split(":");
	    		name = info[0];
	    		int len= info[1]!="-1" ? Integer.valueOf(info[1]): -1;
	    		
	    		int lenFromContent = len;
	    		Value valueFromContent = null;
	    		int typeFromContent = del_type;
	    		if(x != null){
	    			lenFromContent = ((ASTNewArrayContent)x).length;
	    			valueFromContent = ((ASTNewArrayContent)x).value;
	    			typeFromContent = ((ASTNewArrayContent)x).info_type;
	    		}
	    		if(len != -1 && (len != lenFromContent||typeFromContent != del_type))
	    			throw new Exception("Array Length/Type is not equal.");
	    		
	    		if(lenFromContent != -1){
	    			tmp = MyLang.module.addGlobal(type.arrayType(type.type(), lenFromContent), name);
	    			tmp.setInitializer(ASTContent.getTypeZero(del_type));
	    			 Value length = ty_int.constInt(lenFromContent, true);
	    			Value tmp1 = MyLang.module.addGlobal(ty_int, "tmp");
	    			tmp1.setInitializer(ASTContent.getTypeZero(47));
	    			 MyLang.builder.buildStore(length, tmp1);
	    			 ((ASTArrayContent)child).length = tmp1;
	    		} else {
	    			tmp = null;
	    		}
	    		if(valueFromContent != null){
	    			for(int j = 0; j < lenFromContent; j++){
	    				Value ptr = MyLang.builder.buildInBoundsGEP(valueFromContent, "tmp", ty_int.constInt(0, true),ty_int.constInt(j, true));
	    				Value val = MyLang.builder.buildLoad(ptr, "tmp0");
	    				Value ptr2 = MyLang.builder.buildInBoundsGEP(tmp, "tmp",ty_int.constInt(0, true),ty_int.constInt(j, true));
	    				MyLang.builder.buildStore(val, ptr2);
	    			}
	    		}
	    		child.info_type = del_type;
    			child.value = tmp;
	    		context.put(name, child.value, child.type, child.info_type, ((ASTArrayContent)child).length);
	    	}
	    }
	    return new ASTContent(null, DEFINE);
  }
}
/*
 * JavaCC - OriginalChecksum=0b302d373f1e55304bfad6975109a99b (do not edit this
 * line)
 */