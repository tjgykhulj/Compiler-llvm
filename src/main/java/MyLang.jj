/*@bgen(jjtree) Generated By:JJTree: Do not edit this line. MyLang.jj */
/*@egen*/options {
             
                         
}

PARSER_BEGIN(MyLang)

/** An Arithmetic Grammar. */
public class MyLang/*@bgen(jjtree)*/implements MyLangTreeConstants/*@egen*/ {/*@bgen(jjtree)*/
  protected static JJTMyLangState jjtree = new JJTMyLangState();

/*@egen*/
  /** Main entry point. */
  public static void main(String args[]) {
    System.out.println("Reading from standard input...");
    MyLang t = new MyLang(System.in);
    try {
      ASTstart n = t.Start();
      n.dump("");
	  
      System.out.println("Thank you.");
    } catch (Exception e) {
      System.out.println("Oops.");
      System.out.println(e.getMessage());
      e.printStackTrace();
    }
  }
}
PARSER_END(MyLang)

SKIP :
{
  " "
| "\t"
| "\n"
| "\r"
| "\f"
}

TOKEN : /* KEY */
{
  /*< TRUE: "true" | "TRUE" >
| < FALSE: "false" | "FALSE">
|*/ < NULL: "null" >
| < PROGRAM: "program" >
| < BEGIN: "begin" >
| < END: "end" >
| < AS: "as" >
| < DEFINE: "define" >
| < ENDDEF: "end define" >
| < INT: "int" >
| < BOOL: "bool" >
| < FLOAT: "float" >
| < CHAR: "char" >
| < EXP: "exp" >
| < RETURN: "return" >
| < SEMICOlON: ";">
| < WHILE: "while" >
| < DO: "do" >
| < ENDWHILE: "end while" >
| < FOR: "for" >
| < TO: "to" >
| < ENDFOR: "end for" >
| < CONTINUE: "continue" >
| < BREAK: "break" >
| < FOREACH: "foreach" >
| < ENDFORE: "end foreach" >
| < IN: "in" >
| < IF: "if" >
| < THEN: "then" >
| < ENDIF: "end if" >
| < ELSE: "else" >
| < FUNCTION: "function" >
| < ENDFUNC: "end function" >
| < IS: "is" >
| < TYPE: "type" >
| < ENDTYPE: "end type" >
| < EXTEND: "extends" >
| < NOT: "not" >
| < THIS: "this" >
| < AND: "and" >
| < OR: "or" >
| < VOID: "void" >
}

TOKEN: /* operator */
{
  < EQUAL: "=" >
}

TOKEN : /* LITERALS */
{
  < INTEGER_LITERAL: <DIGITS> (["l","L"])? >
| < FLOAT_LITERAL: <DIGITS> "." <DIGITS> >
| < BOOLEAN_LITERAL: "true"|"false" >
| <	NULL_LITERAL: <NULL> >
| < CHARACTER_LITERAL:
      "'"
      (   (~["'","\\","\n","\r"])
        | ("\\"( ["n","\\","'","\""]))
      )
      "'"
  >
| < STRING_LITERAL:
      "\""
      (   (~["\"","\\","\n","\r"])
        | ("\\"
            ( ["n","t","b","r","f","\\","'","\""]
            | ["0"-"7"] ( ["0"-"7"] )?
            | ["0"-"3"] ["0"-"7"] ["0"-"7"]
            )
          )
      )*
      "\""
  >
}

TOKEN : /* BASE */
{
  < IDENTIFIER: <LETTER> (<LETTER>|<DIGIT>)* >
| < DIGITS: (<DIGIT>)+ >
| < LETTER: ["_","a"-"z","A"-"Z"] >
| < DIGIT: ["0"-"9"] >
}


/** Main production. */
ASTstart Start()        : {/*@bgen(jjtree) start */
  ASTstart jjtn000 = new ASTstart(JJTSTART);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/}
{/*@bgen(jjtree) start */
  try {
/*@egen*/
  procedure()/*@bgen(jjtree)*/
 {
   jjtree.closeNodeScope(jjtn000, true);
   jjtc000 = false;
 }
/*@egen*/
 { return jjtn000; }/*@bgen(jjtree)*/
  } catch (Throwable jjte000) {
    if (jjtc000) {
      jjtree.clearNodeScope(jjtn000);
      jjtc000 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte000 instanceof RuntimeException) {
      throw (RuntimeException)jjte000;
    }
    if (jjte000 instanceof ParseException) {
      throw (ParseException)jjte000;
    }
    throw (Error)jjte000;
  } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
  }
/*@egen*/
}

void procedure()          : {/*@bgen(jjtree) program */
  ASTprogram jjtn000 = new ASTprogram(JJTPROGRAM);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/}
{/*@bgen(jjtree) program */
  try {
/*@egen*/
  < PROGRAM >
  ( class_declaration() |
  declaration())*
  < BEGIN >
  block()
  < END >
  ";"/*@bgen(jjtree)*/
  } catch (Throwable jjte000) {
    if (jjtc000) {
      jjtree.clearNodeScope(jjtn000);
      jjtc000 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte000 instanceof RuntimeException) {
      throw (RuntimeException)jjte000;
    }
    if (jjte000 instanceof ParseException) {
      throw (ParseException)jjte000;
    }
    throw (Error)jjte000;
  } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
  }
/*@egen*/
}

void block()        : {/*@bgen(jjtree) block */
  ASTblock jjtn000 = new ASTblock(JJTBLOCK);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/}
{/*@bgen(jjtree) block */
  try {
/*@egen*/
  (statement())*/*@bgen(jjtree)*/
  } catch (Throwable jjte000) {
    if (jjtc000) {
      jjtree.clearNodeScope(jjtn000);
      jjtc000 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte000 instanceof RuntimeException) {
      throw (RuntimeException)jjte000;
    }
    if (jjte000 instanceof ParseException) {
      throw (ParseException)jjte000;
    }
    throw (Error)jjte000;
  } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
  }
/*@egen*/
}

void statement() : {}
{
  return_statement() | common_statement() | while_statement() | for_statement() | continue_statement()
| break_statement() | foreach_statement() | ifthen_statement()
}

void ifthen_statement()            : {/*@bgen(jjtree) ifthenstm */
  ASTifthenstm jjtn000 = new ASTifthenstm(JJTIFTHENSTM);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/}
{/*@bgen(jjtree) ifthenstm */
  try {
/*@egen*/
  < IF >
  expression()
  < THEN >
  block()
  [
   LOOKAHEAD(1)
   < ELSE >
   block()
  ]
  < ENDIF >
  ";"/*@bgen(jjtree)*/
  } catch (Throwable jjte000) {
    if (jjtc000) {
      jjtree.clearNodeScope(jjtn000);
      jjtc000 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte000 instanceof RuntimeException) {
      throw (RuntimeException)jjte000;
    }
    if (jjte000 instanceof ParseException) {
      throw (ParseException)jjte000;
    }
    throw (Error)jjte000;
  } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
  }
/*@egen*/
}

void foreach_statement()             : {/*@bgen(jjtree) foreachstm */
  ASTforeachstm jjtn000 = new ASTforeachstm(JJTFOREACHSTM);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/}
{/*@bgen(jjtree) foreachstm */
  try {
/*@egen*/
  < FOREACH >
  Identifier()
  < IN >
  expression()
  < DO >
  block()
  < ENDFORE >
  ";"/*@bgen(jjtree)*/
  } catch (Throwable jjte000) {
    if (jjtc000) {
      jjtree.clearNodeScope(jjtn000);
      jjtc000 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte000 instanceof RuntimeException) {
      throw (RuntimeException)jjte000;
    }
    if (jjte000 instanceof ParseException) {
      throw (ParseException)jjte000;
    }
    throw (Error)jjte000;
  } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
  }
/*@egen*/
}

void continue_statement()              :	{/*@bgen(jjtree) continuestm */
  ASTcontinuestm jjtn000 = new ASTcontinuestm(JJTCONTINUESTM);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/}
{/*@bgen(jjtree) continuestm */
  try {
/*@egen*/
  < CONTINUE > ";"/*@bgen(jjtree)*/
  } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
  }
/*@egen*/
}

void break_statement()           : {/*@bgen(jjtree) breakstm */
  ASTbreakstm jjtn000 = new ASTbreakstm(JJTBREAKSTM);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/}
{/*@bgen(jjtree) breakstm */
  try {
/*@egen*/
  < BREAK > ";"/*@bgen(jjtree)*/
  } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
  }
/*@egen*/
}

void for_statement()         : {/*@bgen(jjtree) forstm */
  ASTforstm jjtn000 = new ASTforstm(JJTFORSTM);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/}
{/*@bgen(jjtree) forstm */
  try {
/*@egen*/
  < FOR >
  Identifier()
  < EQUAL >
  expression()
  < TO >
  expression()
  < DO >
  block()
  < ENDFOR >
  ";"/*@bgen(jjtree)*/
  } catch (Throwable jjte000) {
    if (jjtc000) {
      jjtree.clearNodeScope(jjtn000);
      jjtc000 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte000 instanceof RuntimeException) {
      throw (RuntimeException)jjte000;
    }
    if (jjte000 instanceof ParseException) {
      throw (ParseException)jjte000;
    }
    throw (Error)jjte000;
  } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
  }
/*@egen*/
}

void while_statement()           : {/*@bgen(jjtree) whilestm */
  ASTwhilestm jjtn000 = new ASTwhilestm(JJTWHILESTM);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/}
{/*@bgen(jjtree) whilestm */
  try {
/*@egen*/
  < WHILE >
  expression()
  < DO >
  block()
  < ENDWHILE >
  ";"/*@bgen(jjtree)*/
  } catch (Throwable jjte000) {
    if (jjtc000) {
      jjtree.clearNodeScope(jjtn000);
      jjtc000 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte000 instanceof RuntimeException) {
      throw (RuntimeException)jjte000;
    }
    if (jjte000 instanceof ParseException) {
      throw (ParseException)jjte000;
    }
    throw (Error)jjte000;
  } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
  }
/*@egen*/
}

void return_statement()            : {/*@bgen(jjtree) returnstm */
  ASTreturnstm jjtn000 = new ASTreturnstm(JJTRETURNSTM);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/}
{/*@bgen(jjtree) returnstm */
  try {
/*@egen*/
  < RETURN > expression() ";"/*@bgen(jjtree)*/
  } catch (Throwable jjte000) {
    if (jjtc000) {
      jjtree.clearNodeScope(jjtn000);
      jjtc000 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte000 instanceof RuntimeException) {
      throw (RuntimeException)jjte000;
    }
    if (jjte000 instanceof ParseException) {
      throw (ParseException)jjte000;
    }
    throw (Error)jjte000;
  } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
  }
/*@egen*/
}

void common_statement()            : {/*@bgen(jjtree) commonstm */
  ASTcommonstm jjtn000 = new ASTcommonstm(JJTCOMMONSTM);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/}
{/*@bgen(jjtree) commonstm */
  try {
/*@egen*/
  [expression()] ";"/*@bgen(jjtree)*/
  } catch (Throwable jjte000) {
    if (jjtc000) {
      jjtree.clearNodeScope(jjtn000);
      jjtc000 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte000 instanceof RuntimeException) {
      throw (RuntimeException)jjte000;
    }
    if (jjte000 instanceof ParseException) {
      throw (ParseException)jjte000;
    }
    throw (Error)jjte000;
  } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
  }
/*@egen*/
}

void class_declaration()                    : {/*@bgen(jjtree) class_declaration */
  ASTclass_declaration jjtn000 = new ASTclass_declaration(JJTCLASS_DECLARATION);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/}
{/*@bgen(jjtree) class_declaration */
  try {
/*@egen*/
  < TYPE >
  Identifier()
  [ <EXTEND > Identifier()]
  < IS >
 (( LOOKAHEAD(3)
    function_declaration() |
    variable_declaration())*
  )
  < ENDTYPE >
  ";"/*@bgen(jjtree)*/
  } catch (Throwable jjte000) {
    if (jjtc000) {
      jjtree.clearNodeScope(jjtn000);
      jjtc000 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte000 instanceof RuntimeException) {
      throw (RuntimeException)jjte000;
    }
    if (jjte000 instanceof ParseException) {
      throw (ParseException)jjte000;
    }
    throw (Error)jjte000;
  } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
  }
/*@egen*/
}

void declaration()              : {/*@bgen(jjtree) declaration */
  ASTdeclaration jjtn000 = new ASTdeclaration(JJTDECLARATION);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/}
{/*@bgen(jjtree) declaration */
        try {
/*@egen*/
   	< DEFINE >
  (( LOOKAHEAD(3)
    function_declaration() |
    variable_declaration()))*
  < ENDDEF >
  ";"/*@bgen(jjtree)*/
        } catch (Throwable jjte000) {
          if (jjtc000) {
            jjtree.clearNodeScope(jjtn000);
            jjtc000 = false;
          } else {
            jjtree.popNode();
          }
          if (jjte000 instanceof RuntimeException) {
            throw (RuntimeException)jjte000;
          }
          if (jjte000 instanceof ParseException) {
            throw (ParseException)jjte000;
          }
          throw (Error)jjte000;
        } finally {
          if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
          }
        }
/*@egen*/
}

void function_declaration()                   : {/*@bgen(jjtree) func_declaration */
  ASTfunc_declaration jjtn000 = new ASTfunc_declaration(JJTFUNC_DECLARATION);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/}
{/*@bgen(jjtree) func_declaration */
  try {
/*@egen*/
  Identifier()
  ( "(" [declaration_kind() ("," declaration_kind() )* < AS > Type()] ")")*
  < AS > < FUNCTION > < RETURN > Type()    [ < IS > [ < DEFINE > (LOOKAHEAD(3) variable_declaration()|function_declaration())* < ENDDEF > ";" ]
  	block() <ENDFUNC> ]
  ";"/*@bgen(jjtree)*/
  } catch (Throwable jjte000) {
    if (jjtc000) {
      jjtree.clearNodeScope(jjtn000);
      jjtc000 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte000 instanceof RuntimeException) {
      throw (RuntimeException)jjte000;
    }
    if (jjte000 instanceof ParseException) {
      throw (ParseException)jjte000;
    }
    throw (Error)jjte000;
  } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
  }
/*@egen*/
}

void variable_declaration()                  : {/*@bgen(jjtree) var_declaration */
  ASTvar_declaration jjtn000 = new ASTvar_declaration(JJTVAR_DECLARATION);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/}
{/*@bgen(jjtree) var_declaration */
  try {
/*@egen*/
  declaration_kind() ("," declaration_kind())* < AS > Type()
  [< IS > ExpressionList()]
  ";"/*@bgen(jjtree)*/
  } catch (Throwable jjte000) {
    if (jjtc000) {
      jjtree.clearNodeScope(jjtn000);
      jjtc000 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte000 instanceof RuntimeException) {
      throw (RuntimeException)jjte000;
    }
    if (jjte000 instanceof ParseException) {
      throw (ParseException)jjte000;
    }
    throw (Error)jjte000;
  } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
  }
/*@egen*/
}

void declaration_kind()  : {}
{
  	LOOKAHEAD(3) arraydeclaration_num() | LOOKAHEAD(2) arraydeclaration_nonum() |   Identifier()
//	Identifier() [ "[" [ <INTEGER_LITERAL> ] "]" ]
}

void arraydeclaration_num()       : {/*@bgen(jjtree) array */
  ASTarray jjtn000 = new ASTarray(JJTARRAY);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/}
{/*@bgen(jjtree) array */
  try {
/*@egen*/
  Identifier() "[" expression() "]"/*@bgen(jjtree)*/
  } catch (Throwable jjte000) {
    if (jjtc000) {
      jjtree.clearNodeScope(jjtn000);
      jjtc000 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte000 instanceof RuntimeException) {
      throw (RuntimeException)jjte000;
    }
    if (jjte000 instanceof ParseException) {
      throw (ParseException)jjte000;
    }
    throw (Error)jjte000;
  } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
  }
/*@egen*/
}

void arraydeclaration_nonum()       : {/*@bgen(jjtree) array */
  ASTarray jjtn000 = new ASTarray(JJTARRAY);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/}
{/*@bgen(jjtree) array */
  try {
/*@egen*/
  Identifier() "[" "]"/*@bgen(jjtree)*/
  } catch (Throwable jjte000) {
    if (jjtc000) {
      jjtree.clearNodeScope(jjtn000);
      jjtc000 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte000 instanceof RuntimeException) {
      throw (RuntimeException)jjte000;
    }
    if (jjte000 instanceof ParseException) {
      throw (ParseException)jjte000;
    }
    throw (Error)jjte000;
  } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
  }
/*@egen*/
}

void Type()  :
{}
{
  PrimitiveType() ( "[" "]" )*
|/*@bgen(jjtree) Type */
  {
    ASTType jjtn001 = new ASTType(JJTTYPE);
    boolean jjtc001 = true;
    jjtree.openNodeScope(jjtn001);
  }
  try {
/*@egen*/ Identifier()/*@bgen(jjtree)*/
  } catch (Throwable jjte001) {
    if (jjtc001) {
      jjtree.clearNodeScope(jjtn001);
      jjtc001 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte001 instanceof RuntimeException) {
      throw (RuntimeException)jjte001;
    }
    if (jjte001 instanceof ParseException) {
      throw (ParseException)jjte001;
    }
    throw (Error)jjte001;
  } finally {
    if (jjtc001) {
      jjtree.closeNodeScope(jjtn001, true);
    }
  }
/*@egen*/
     
}

void PrimitiveType()          :
{/*@bgen(jjtree) primtype */
 ASTprimtype jjtn000 = new ASTprimtype(JJTPRIMTYPE);
 boolean jjtc000 = true;
 jjtree.openNodeScope(jjtn000);
/*@egen*/Token t;}
{/*@bgen(jjtree) primtype */
  try {
/*@egen*/
  (t = "bool"
|t = "char"
|t = "int"
|t = "float"
|t = "void")/*@bgen(jjtree)*/
{
  jjtree.closeNodeScope(jjtn000, true);
  jjtc000 = false;
}
/*@egen*/
{
  jjtn000.jjtSetValue(t.image);
}/*@bgen(jjtree)*/
  } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
  }
/*@egen*/
}

/** An Expression. */
void expression() : {}
{/*@bgen(jjtree) ArrayConstructor */
  {
    ASTArrayConstructor jjtn001 = new ASTArrayConstructor(JJTARRAYCONSTRUCTOR);
    boolean jjtc001 = true;
    jjtree.openNodeScope(jjtn001);
  }
  try {
/*@egen*/
  (    "[" ExpressionList() "]"
  )/*@bgen(jjtree)*/
  } catch (Throwable jjte001) {
    if (jjtc001) {
      jjtree.clearNodeScope(jjtn001);
      jjtc001 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte001 instanceof RuntimeException) {
      throw (RuntimeException)jjte001;
    }
    if (jjte001 instanceof ParseException) {
      throw (ParseException)jjte001;
    }
    throw (Error)jjte001;
  } finally {
    if (jjtc001) {
      jjtree.closeNodeScope(jjtn001, true);
    }
  }
/*@egen*/                  
  |/*@bgen(jjtree) #Assignment(> 1) */
    {
      ASTAssignment jjtn002 = new ASTAssignment(JJTASSIGNMENT);
      boolean jjtc002 = true;
      jjtree.openNodeScope(jjtn002);
    }
    try {
/*@egen*/    (LogicalAndExpression() ["=" expression()] )/*@bgen(jjtree)*/
    } catch (Throwable jjte002) {
      if (jjtc002) {
        jjtree.clearNodeScope(jjtn002);
        jjtc002 = false;
      } else {
        jjtree.popNode();
      }
      if (jjte002 instanceof RuntimeException) {
        throw (RuntimeException)jjte002;
      }
      if (jjte002 instanceof ParseException) {
        throw (ParseException)jjte002;
      }
      throw (Error)jjte002;
    } finally {
      if (jjtc002) {
        jjtree.closeNodeScope(jjtn002, jjtree.nodeArity() > 1);
      }
    }
/*@egen*/
                 
}

void LogicalOrExpression() : {}
{/*@bgen(jjtree) #LogicalOrExpression(> 1) */
  {
    ASTLogicalOrExpression jjtn001 = new ASTLogicalOrExpression(JJTLOGICALOREXPRESSION);
    boolean jjtc001 = true;
    jjtree.openNodeScope(jjtn001);
  }
  try {
/*@egen*/
  (LogicalAndExpression() [ <OR> LogicalOrExpression() ] )/*@bgen(jjtree)*/
  } catch (Throwable jjte001) {
    if (jjtc001) {
      jjtree.clearNodeScope(jjtn001);
      jjtc001 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte001 instanceof RuntimeException) {
      throw (RuntimeException)jjte001;
    }
    if (jjte001 instanceof ParseException) {
      throw (ParseException)jjte001;
    }
    throw (Error)jjte001;
  } finally {
    if (jjtc001) {
      jjtree.closeNodeScope(jjtn001, jjtree.nodeArity() > 1);
    }
  }
/*@egen*/
                          
}
void LogicalAndExpression() : {}
{/*@bgen(jjtree) #LogicalAndExpression(> 1) */
  {
    ASTLogicalAndExpression jjtn001 = new ASTLogicalAndExpression(JJTLOGICALANDEXPRESSION);
    boolean jjtc001 = true;
    jjtree.openNodeScope(jjtn001);
  }
  try {
/*@egen*/
  (EqualityExpression() [ <AND> LogicalAndExpression() ] )/*@bgen(jjtree)*/
  } catch (Throwable jjte001) {
    if (jjtc001) {
      jjtree.clearNodeScope(jjtn001);
      jjtc001 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte001 instanceof RuntimeException) {
      throw (RuntimeException)jjte001;
    }
    if (jjte001 instanceof ParseException) {
      throw (ParseException)jjte001;
    }
    throw (Error)jjte001;
  } finally {
    if (jjtc001) {
      jjtree.closeNodeScope(jjtn001, jjtree.nodeArity() > 1);
    }
  }
/*@egen*/
                           
}
void EqualityExpression() : {Token t; }
{/*@bgen(jjtree) #EqualityExpression(> 1) */
  {
    ASTEqualityExpression jjtn001 = new ASTEqualityExpression(JJTEQUALITYEXPRESSION);
    boolean jjtc001 = true;
    jjtree.openNodeScope(jjtn001);
  }
  try {
/*@egen*/
  (RelationalExpression()
  	[ ( t="==" | t="!=" )
  {
    jjtn001.jjtSetValue(t.image);
  }
  EqualityExpression() ] )/*@bgen(jjtree)*/
  } catch (Throwable jjte001) {
    if (jjtc001) {
      jjtree.clearNodeScope(jjtn001);
      jjtc001 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte001 instanceof RuntimeException) {
      throw (RuntimeException)jjte001;
    }
    if (jjte001 instanceof ParseException) {
      throw (ParseException)jjte001;
    }
    throw (Error)jjte001;
  } finally {
    if (jjtc001) {
      jjtree.closeNodeScope(jjtn001, jjtree.nodeArity() > 1);
    }
  }
/*@egen*/
                         
}
void RelationalExpression() : {Token t;}
{/*@bgen(jjtree) #RelationalExpression(> 1) */
  {
    ASTRelationalExpression jjtn001 = new ASTRelationalExpression(JJTRELATIONALEXPRESSION);
    boolean jjtc001 = true;
    jjtree.openNodeScope(jjtn001);
  }
  try {
/*@egen*/
  (ShiftExpression() [ LOOKAHEAD(2) ( t="<" | t= ">" | t="<=" | t=">=" )
  {
    jjtn001.jjtSetValue(t.image);
  }
   ShiftExpression() ])/*@bgen(jjtree)*/
  } catch (Throwable jjte001) {
    if (jjtc001) {
      jjtree.clearNodeScope(jjtn001);
      jjtc001 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte001 instanceof RuntimeException) {
      throw (RuntimeException)jjte001;
    }
    if (jjte001 instanceof ParseException) {
      throw (ParseException)jjte001;
    }
    throw (Error)jjte001;
  } finally {
    if (jjtc001) {
      jjtree.closeNodeScope(jjtn001, jjtree.nodeArity() > 1);
    }
  }
/*@egen*/
                           
}
void ShiftExpression() : {Token t;}
{/*@bgen(jjtree) #ShiftExpression(> 1) */
  {
    ASTShiftExpression jjtn001 = new ASTShiftExpression(JJTSHIFTEXPRESSION);
    boolean jjtc001 = true;
    jjtree.openNodeScope(jjtn001);
  }
  try {
/*@egen*/
  (AdditiveExpression() [ LOOKAHEAD(2) ( t=">>" | t="<<" )
  {
    jjtn001.jjtSetValue(t.image);
  } AdditiveExpression() ])/*@bgen(jjtree)*/
  } catch (Throwable jjte001) {
    if (jjtc001) {
      jjtree.clearNodeScope(jjtn001);
      jjtc001 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte001 instanceof RuntimeException) {
      throw (RuntimeException)jjte001;
    }
    if (jjte001 instanceof ParseException) {
      throw (ParseException)jjte001;
    }
    throw (Error)jjte001;
  } finally {
    if (jjtc001) {
      jjtree.closeNodeScope(jjtn001, jjtree.nodeArity() > 1);
    }
  }
/*@egen*/
                      
}

/** An Additive Expression. */
void AdditiveExpression() : {Token t;}
{/*@bgen(jjtree) #CommonExpression(> 1) */
        {
          ASTCommonExpression jjtn002 = new ASTCommonExpression(JJTCOMMONEXPRESSION);
          boolean jjtc002 = true;
          jjtree.openNodeScope(jjtn002);
        }
        try {
/*@egen*/
	(MultiplicativeExpression()
		(		  (t = "+" | t="-")/*@bgen(jjtree) Opt */
                {
                  ASTOpt jjtn001 = new ASTOpt(JJTOPT);
                  boolean jjtc001 = true;
                  jjtree.openNodeScope(jjtn001);
                }
                try {
/*@egen*//*@bgen(jjtree)*/
                {
                  jjtree.closeNodeScope(jjtn001, true);
                  jjtc001 = false;
                }
/*@egen*/ 
		{
		  jjtn001.jjtSetValue(t.image);
		}/*@bgen(jjtree)*/
                } finally {
                  if (jjtc001) {
                    jjtree.closeNodeScope(jjtn001, true);
                  }
                }
/*@egen*/     
	 	MultiplicativeExpression())* )/*@bgen(jjtree)*/
        } catch (Throwable jjte002) {
          if (jjtc002) {
            jjtree.clearNodeScope(jjtn002);
            jjtc002 = false;
          } else {
            jjtree.popNode();
          }
          if (jjte002 instanceof RuntimeException) {
            throw (RuntimeException)jjte002;
          }
          if (jjte002 instanceof ParseException) {
            throw (ParseException)jjte002;
          }
          throw (Error)jjte002;
        } finally {
          if (jjtc002) {
            jjtree.closeNodeScope(jjtn002, jjtree.nodeArity() > 1);
          }
        }
/*@egen*/
	                     
}
/** A Multiplicative Expression. */
void MultiplicativeExpression() : {Token t; }
{/*@bgen(jjtree) #CommonExpression(> 1) */
        {
          ASTCommonExpression jjtn002 = new ASTCommonExpression(JJTCOMMONEXPRESSION);
          boolean jjtc002 = true;
          jjtree.openNodeScope(jjtn002);
        }
        try {
/*@egen*/
	(UnaryExpression()
		(		   (t = "*" | t = "/" | t = "%")/*@bgen(jjtree) Opt */
                {
                  ASTOpt jjtn001 = new ASTOpt(JJTOPT);
                  boolean jjtc001 = true;
                  jjtree.openNodeScope(jjtn001);
                }
                try {
/*@egen*//*@bgen(jjtree)*/
                {
                  jjtree.closeNodeScope(jjtn001, true);
                  jjtc001 = false;
                }
/*@egen*/
		{
		  jjtn001.jjtSetValue(t.image);
		}/*@bgen(jjtree)*/
                } finally {
                  if (jjtc001) {
                    jjtree.closeNodeScope(jjtn001, true);
                  }
                }
/*@egen*/     
		 UnaryExpression())* )/*@bgen(jjtree)*/
        } catch (Throwable jjte002) {
          if (jjtc002) {
            jjtree.clearNodeScope(jjtn002);
            jjtc002 = false;
          } else {
            jjtree.popNode();
          }
          if (jjte002 instanceof RuntimeException) {
            throw (RuntimeException)jjte002;
          }
          if (jjte002 instanceof ParseException) {
            throw (ParseException)jjte002;
          }
          throw (Error)jjte002;
        } finally {
          if (jjtc002) {
            jjtree.closeNodeScope(jjtn002, jjtree.nodeArity() > 1);
          }
        }
/*@egen*/
	                     
}

/** A Unary Expression. */
void UnaryExpression() : {Token t;}
{/*@bgen(jjtree) UnaryExpression */
          {
            ASTUnaryExpression jjtn001 = new ASTUnaryExpression(JJTUNARYEXPRESSION);
            boolean jjtc001 = true;
            jjtree.openNodeScope(jjtn001);
          }
          try {
/*@egen*/
	  (
	    (t= "+" | t="-" | t=<NOT>)
	{
	  jjtn001.jjtSetValue(t.image);
	}
	UnaryExpression()
	)/*@bgen(jjtree)*/
          } catch (Throwable jjte001) {
            if (jjtc001) {
              jjtree.clearNodeScope(jjtn001);
              jjtc001 = false;
            } else {
              jjtree.popNode();
            }
            if (jjte001 instanceof RuntimeException) {
              throw (RuntimeException)jjte001;
            }
            if (jjte001 instanceof ParseException) {
              throw (ParseException)jjte001;
            }
            throw (Error)jjte001;
          } finally {
            if (jjtc001) {
              jjtree.closeNodeScope(jjtn001, true);
            }
          }
/*@egen*/
	                
|	Primary()
}

void Primary() : {}
{
  Literal()
| "(" expression() ")"
|/*@bgen(jjtree) #PrimaryPrefixAccess(> 1) */
  {
    ASTPrimaryPrefixAccess jjtn001 = new ASTPrimaryPrefixAccess(JJTPRIMARYPREFIXACCESS);
    boolean jjtc001 = true;
    jjtree.openNodeScope(jjtn001);
  }
  try {
/*@egen*/ (PrimaryPrefix() (PrimaryAccess())*)/*@bgen(jjtree)*/
  } catch (Throwable jjte001) {
    if (jjtc001) {
      jjtree.clearNodeScope(jjtn001);
      jjtc001 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte001 instanceof RuntimeException) {
      throw (RuntimeException)jjte001;
    }
    if (jjte001 instanceof ParseException) {
      throw (ParseException)jjte001;
    }
    throw (Error)jjte001;
  } finally {
    if (jjtc001) {
      jjtree.closeNodeScope(jjtn001, jjtree.nodeArity() > 1);
    }
  }
/*@egen*/                         
}
void PrimaryPrefix() :
{}
{
  Identifier()
| "[" ExpressionList() "]"
}
void PrimaryAccess() :{Token t;}
{
  (  t = "["/*@bgen(jjtree) PrimaryAccess */
  {
    ASTPrimaryAccess jjtn001 = new ASTPrimaryAccess(JJTPRIMARYACCESS);
    boolean jjtc001 = true;
    jjtree.openNodeScope(jjtn001);
  }
  try {
/*@egen*//*@bgen(jjtree)*/
  {
    jjtree.closeNodeScope(jjtn001, true);
    jjtc001 = false;
  }
/*@egen*/
  {
    jjtn001.jjtSetValue(t.image);
  }/*@bgen(jjtree)*/
  } finally {
    if (jjtc001) {
      jjtree.closeNodeScope(jjtn001, true);
    }
  }
/*@egen*/
                 expression() "]"
|
  t = "."/*@bgen(jjtree) PrimaryAccess */
  {
    ASTPrimaryAccess jjtn002 = new ASTPrimaryAccess(JJTPRIMARYACCESS);
    boolean jjtc002 = true;
    jjtree.openNodeScope(jjtn002);
  }
  try {
/*@egen*//*@bgen(jjtree)*/
  {
    jjtree.closeNodeScope(jjtn002, true);
    jjtc002 = false;
  }
/*@egen*/
  {
    jjtn002.jjtSetValue(t.image);
  }/*@bgen(jjtree)*/
  } finally {
    if (jjtc002) {
      jjtree.closeNodeScope(jjtn002, true);
    }
  }
/*@egen*/
                 Identifier()
|
  t = "("/*@bgen(jjtree) PrimaryAccess */
  {
    ASTPrimaryAccess jjtn003 = new ASTPrimaryAccess(JJTPRIMARYACCESS);
    boolean jjtc003 = true;
    jjtree.openNodeScope(jjtn003);
  }
  try {
/*@egen*//*@bgen(jjtree)*/
  {
    jjtree.closeNodeScope(jjtn003, true);
    jjtc003 = false;
  }
/*@egen*/ 
  {
    jjtn003.jjtSetValue(t.image);
  }/*@bgen(jjtree)*/
  } finally {
    if (jjtc003) {
      jjtree.closeNodeScope(jjtn003, true);
    }
  }
/*@egen*/
                 [ExpressionList()] ")")
}

void Name() : {}
{
  Identifier() ( "." Identifier() )*
}
void ExpressionList() : {}
{
  expression() ( "," expression() )*
}


/**********************************************************Tokens************************************************************************/

/** An Identifier. */
void Identifier()             :
{/*@bgen(jjtree) Identifier */
  ASTIdentifier jjtn000 = new ASTIdentifier(JJTIDENTIFIER);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/
  Token t;
}
{/*@bgen(jjtree) Identifier */
  try {
/*@egen*/
  t=<IDENTIFIER>/*@bgen(jjtree)*/
  {
    jjtree.closeNodeScope(jjtn000, true);
    jjtc000 = false;
  }
/*@egen*/
  {
    jjtn000.jjtSetValue(t.image);
  }/*@bgen(jjtree)*/
  } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
  }
/*@egen*/
}


void Literal() :
{
  Token t;
}
{/*@bgen(jjtree) Integer */
  {
    ASTInteger jjtn001 = new ASTInteger(JJTINTEGER);
    boolean jjtc001 = true;
    jjtree.openNodeScope(jjtn001);
  }
  try {
/*@egen*/
  t = <INTEGER_LITERAL>/*@bgen(jjtree)*/
  } finally {
    if (jjtc001) {
      jjtree.closeNodeScope(jjtn001, true);
    }
  }
/*@egen*/         
  {
    jjtn001.jjtSetValue(t.image);
  }
|/*@bgen(jjtree) Float */
  {
    ASTFloat jjtn002 = new ASTFloat(JJTFLOAT);
    boolean jjtc002 = true;
    jjtree.openNodeScope(jjtn002);
  }
  try {
/*@egen*/ t = <FLOAT_LITERAL>/*@bgen(jjtree)*/
  } finally {
    if (jjtc002) {
      jjtree.closeNodeScope(jjtn002, true);
    }
  }
/*@egen*/       
  {
    jjtn002.jjtSetValue(t.image);
  }
|/*@bgen(jjtree) Char */
  {
    ASTChar jjtn003 = new ASTChar(JJTCHAR);
    boolean jjtc003 = true;
    jjtree.openNodeScope(jjtn003);
  }
  try {
/*@egen*/ t = <CHARACTER_LITERAL>/*@bgen(jjtree)*/
  } finally {
    if (jjtc003) {
      jjtree.closeNodeScope(jjtn003, true);
    }
  }
/*@egen*/      
  {
    jjtn003.jjtSetValue(t.image);
  }
|/*@bgen(jjtree) Boolean */
  {
    ASTBoolean jjtn004 = new ASTBoolean(JJTBOOLEAN);
    boolean jjtc004 = true;
    jjtree.openNodeScope(jjtn004);
  }
  try {
/*@egen*/ t = <BOOLEAN_LITERAL>/*@bgen(jjtree)*/
  } finally {
    if (jjtc004) {
      jjtree.closeNodeScope(jjtn004, true);
    }
  }
/*@egen*/         
  {
    jjtn004.jjtSetValue(t.image);
  }
|/*@bgen(jjtree) Null */
  {
    ASTNull jjtn005 = new ASTNull(JJTNULL);
    boolean jjtc005 = true;
    jjtree.openNodeScope(jjtn005);
  }
  try {
/*@egen*/ t = <NULL_LITERAL>/*@bgen(jjtree)*/
  } finally {
    if (jjtc005) {
      jjtree.closeNodeScope(jjtn005, true);
    }
  }
/*@egen*/      
  {
    jjtn005.jjtSetValue(t.image);
  }
|/*@bgen(jjtree) String */
  {
    ASTString jjtn006 = new ASTString(JJTSTRING);
    boolean jjtc006 = true;
    jjtree.openNodeScope(jjtn006);
  }
  try {
/*@egen*/ t = <STRING_LITERAL>/*@bgen(jjtree)*/
  } finally {
    if (jjtc006) {
      jjtree.closeNodeScope(jjtn006, true);
    }
  }
/*@egen*/        
  {
    jjtn006.jjtSetValue(t.image);
  }
}